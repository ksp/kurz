{
    "tasks": [
        {
            "id": "26-Z1-1",
            "type": "open-data",
            "comment": "Kevin a magnety - triviální, lineární průchod pole",
            "requires": [
                "kucharka-zakladni-reprezentace-dat"
            ],
            "title": "Kevin a magnety",
            "position": [
                -1098.8656158447266,
                510.8115463256836
            ],
            "taskReference": "26-Z1-1",
            "points": 8
        },
        {
            "id": "26-Z1-2",
            "type": "open-data",
            "comment": "Piškvorky - detekce vítězství v piškvorkách, procházení 2D pole v různych směrech",
            "requires": [
                "26-Z4-3"
            ],
            "position": [
                -1980.3810119628906,
                -886.6939468383789
            ],
            "taskReference": "26-Z1-2",
            "title": "Piškvorky",
            "hidden": true,
            "points": 10
        },
        {
            "id": "26-Z1-3",
            "type": "open-data",
            "comment": "Zamilovaný dopis - triviální, procházení stringů po znacích a kontrola podmínek",
            "requires": [
                "label-retezce",
                "30-Z1-3"
            ],
            "position": [
                -877.8441772460938,
                1257.5475769042969
            ],
            "taskReference": "26-Z1-3",
            "title": "Zamilovaný dopis",
            "hidden": false,
            "points": 10
        },
        {
            "id": "26-Z1-4",
            "type": "open-data",
            "comment": "Hroch v jezeře - BFS či jiné prohledávání, počítání velikosti komponent v 2D poli, ",
            "requires": [
                "label-grafy",
                "26-Z4-4"
            ],
            "position": [
                -1546.9116821289062,
                1509.8830451965332
            ],
            "taskReference": "26-Z1-4",
            "title": "Hroch v jezeře",
            "hidden": false,
            "points": 12
        },
        {
            "id": "26-Z2-1",
            "type": "open-data",
            "comment": "Had z domina - triviální, linerání průchod pole a počítání, na kolika místech platí podmínka, vyžaduje práci se dvojicemi",
            "requires": [
                "label-1d-pole",
                "kucharka-zakladni-pole"
            ],
            "position": [
                -853.5936813354492,
                732.3334197998047
            ],
            "taskReference": "26-Z2-1",
            "title": "Had z domina",
            "points": 8
        },
        {
            "id": "26-Z2-2",
            "type": "open-data",
            "comment": "SADO - triviální, procházení celých čísel v intervalu a kontrola podmínky",
            "requires": [
                "kucharka-zakladni-algoritmus"
            ],
            "position": [
                -1050.4334030151367,
                343.90081787109375
            ],
            "taskReference": "26-Z2-2",
            "title": "SADO",
            "hidden": false,
            "points": 10
        },
        {
            "id": "26-Z2-3",
            "type": "open-data",
            "comment": "Šifrovaná zpráva - práce s řetězci, hledání mapování mezi písmenky (substitučka) a validace, že jinde substitučka funguje",
            "requires": [
                "label-retezce",
                "26-Z1-3"
            ],
            "position": [
                -978.106086730957,
                1304.8600769042969
            ],
            "taskReference": "26-Z2-3",
            "title": "Šifrovaná zpráva",
            "hidden": false,
            "points": 10
        },
        {
            "id": "26-Z2-4",
            "type": "open-data",
            "comment": "Životně důležitá úloha -  dostanu pole čísel, potřebuju v něm najít pravidelně se opakující výskyty hodnot, relativně složitá práce s poli, dvojcemi apod.",
            "requires": [
                "26-Z2-1"
            ],
            "title": "Životně důležitá úloha",
            "position": [
                -774.7574334144592,
                876.3235397338867
            ],
            "taskReference": "26-Z2-4",
            "points": 12
        },
        {
            "id": "26-Z3-1",
            "type": "open-data",
            "comment": "Zámky labyrintu - hromada ifů, vhodné možná na code review, hledání čísla z trojice takového, že je trojice aritmetrická posloupnost",
            "requires": [],
            "position": [
                2079.496368408203,
                521.1396331787109
            ],
            "taskReference": "26-Z3-1",
            "title": "Zámky labyrintu",
            "hidden": true,
            "points": 8
        },
        {
            "id": "26-Z3-2",
            "type": "open-data",
            "comment": "Čarodějova šifra - šifrování mřížkou, práce se stringy, rotace matice, vhodné na code review?, docela hard",
            "requires": [
                "29-Z3-2"
            ],
            "position": [
                -1190.8603820800781,
                1400.4236450195312
            ],
            "taskReference": "26-Z3-2",
            "title": "Čarodějova šifra",
            "hidden": false,
            "points": 10
        },
        {
            "id": "26-Z3-3",
            "type": "open-data",
            "comment": "Hádanka - triky s dělitelností devíti a rozkladem čísel, docela hard teorie",
            "requires": [],
            "position": [
                2118.496368408203,
                600.1396331787109
            ],
            "taskReference": "26-Z3-3",
            "title": "Hádanka",
            "hidden": true,
            "points": 10
        },
        {
            "id": "26-Z3-4",
            "type": "open-data",
            "comment": "Tvar labyrintu - nejdelší cesta ve stromě, graf",
            "requires": [
                "kucharka-zakladni-stromy"
            ],
            "position": [
                -1693.1104736328125,
                1369.2992630004883
            ],
            "taskReference": "26-Z3-4",
            "title": "Tvar labyrintu",
            "points": 12
        },
        {
            "id": "26-Z4-1",
            "type": "open-data",
            "comment": "Vražedná čísla- WTF, teorie čísel, hard as fuck, divný",
            "requires": [],
            "position": [
                1961.089413590992,
                464.03806816920724
            ],
            "taskReference": "26-Z4-1",
            "title": "Vražedná čísla",
            "hidden": true,
            "points": 8
        },
        {
            "id": "26-Z4-2",
            "type": "open-data",
            "comment": "Sbírání vajíček - hledení mediánu, musí se to ale vymyslet, nejkratší cesta při chození tam a zpět",
            "requires": [],
            "position": [
                543.2475501644587,
                -786.0833304046971
            ],
            "taskReference": "26-Z4-2",
            "title": "Sbírání vajíček",
            "hidden": true,
            "points": 10
        },
        {
            "id": "26-Z4-3",
            "type": "open-data",
            "comment": "Hra Othello - link na 26-Z1-2, procházení 2D pole po různých směrech",
            "requires": [
                "label-2d-pole"
            ],
            "title": "Hra Othello",
            "position": [
                -1922.4027099609375,
                -929.747673034668
            ],
            "taskReference": "26-Z4-3",
            "hidden": true,
            "points": 10
        },
        {
            "id": "26-Z4-4",
            "type": "open-data",
            "comment": "Hlídači v labyrintu - policajti hlídající na grafu, konkrétně na stromě, rekurze, technicky asi až DP",
            "requires": [
                "kucharka-zakladni-stromy"
            ],
            "position": [
                -1552.9628295898438,
                1369.7941970825195
            ],
            "taskReference": "26-Z4-4",
            "title": "Hlídači v labyrintu",
            "points": 12
        },
        {
            "type": "open-data",
            "id": "27-1-4",
            "taskReference": "27-1-4",
            "requires": [],
            "position": [
                2669.6982345581055,
                1304.2623472213745
            ],
            "title": "Head-up display",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-2-5",
            "taskReference": "27-2-5",
            "requires": [],
            "position": [
                1780.0358810424805,
                1282.1748838424683
            ],
            "title": "Nejdelší příkaz",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "27-3-5",
            "taskReference": "27-3-5",
            "requires": [],
            "position": [
                -1834.666145324707,
                -733.8038759231567
            ],
            "title": "Komprese obrazu",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-4-5",
            "taskReference": "27-4-5",
            "requires": [],
            "position": [
                2644.220329284668,
                947.916277885437
            ],
            "title": "Večeře pro opraváře",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "27-5-3",
            "taskReference": "27-5-3",
            "requires": [],
            "position": [
                2619.3832931518555,
                783.1289854049683
            ],
            "title": "Čekání na poště",
            "hidden": true,
            "points": 9
        },
        {
            "type": "open-data",
            "id": "27-Z1-1",
            "taskReference": "27-Z1-1",
            "requires": [
                "kucharka-zakladni-reprezentace-dat"
            ],
            "position": [
                -1005.604621887207,
                549.779803276062
            ],
            "title": "Na zastávce",
            "hidden": false,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "27-Z1-2",
            "taskReference": "27-Z1-2",
            "requires": [],
            "position": [
                1913.8917770385742,
                -446.83113956451416
            ],
            "title": "Kalkulačka",
            "comment": "jednoduché načtení vstupu a pak vyhodnocení",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z1-3",
            "taskReference": "27-Z1-3",
            "requires": [],
            "position": [
                2081.2895431518555,
                1403.360613822937
            ],
            "title": "Slovník T9",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z1-4",
            "taskReference": "27-Z1-4",
            "requires": [],
            "position": [
                1895.9914474487305,
                1352.320330619812
            ],
            "title": "Lyžař",
            "hidden": true,
            "points": 12
        },
        {
            "id": "27-Z2-1",
            "type": "open-data",
            "comment": "Závorky z cereálií - 2 průchody pole, závorky",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "position": [
                -954.3355388641357,
                782.6399002075195
            ],
            "taskReference": "27-Z2-1",
            "title": "Závorky z cereálií",
            "points": 8
        },
        {
            "type": "open-data",
            "id": "27-Z2-2",
            "taskReference": "27-Z2-2",
            "requires": [],
            "position": [
                1461.0358810424805,
                1400.1748838424683
            ],
            "title": "Hrnce od Horsta",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z2-3",
            "taskReference": "27-Z2-3",
            "requires": [],
            "position": [
                1370.6698532104492,
                1471.5408506393433
            ],
            "title": "Nápis na tričku",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z2-4",
            "taskReference": "27-Z2-4",
            "requires": [],
            "position": [
                1580.0358810424805,
                1413.1748838424683
            ],
            "title": "Hořící auto",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "27-Z3-1",
            "taskReference": "27-Z3-1",
            "requires": [],
            "position": [
                1030.244773864746,
                1919.3284482955933
            ],
            "title": "Kevin nabíječ, s.r.o.",
            "comment": "chyták v posledním vstupu, jinak fakt jednoduchá",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "27-Z3-2",
            "taskReference": "27-Z3-2",
            "requires": [],
            "position": [
                1832.0358810424805,
                1173.1748838424683
            ],
            "title": "Nedej vitagen",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z3-3",
            "taskReference": "27-Z3-3",
            "requires": [],
            "position": [
                -2202.1037907600403,
                -397.1529359817505
            ],
            "title": "Superstromy",
            "comment": "třízení pole (info o counting sortu)",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z3-4",
            "taskReference": "27-Z3-4",
            "requires": [
                "30-Z2-2"
            ],
            "position": [
                -1323.016975402832,
                -704.395977973938
            ],
            "title": "Robo Rally",
            "hidden": true,
            "points": 12,
            "comment": "Navazuje na 30-Z2-2, jediný rozdíl je v otáčení a pohybu vpřed oproti pohybu do čtyř směrů"
        },
        {
            "type": "open-data",
            "id": "27-Z4-1",
            "taskReference": "27-Z4-1",
            "requires": [],
            "position": [
                1747.4562911987305,
                -322.0640230178833
            ],
            "title": "Záhada Pražského orloje",
            "comment": "Euklidův algoritmus, potřeba vymyslet přes matematiku",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "27-Z4-2",
            "taskReference": "27-Z4-2",
            "requires": [],
            "position": [
                -1739.9302444458008,
                -835.0557069778442
            ],
            "title": "Unavení u oken",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z4-3",
            "taskReference": "27-Z4-3",
            "requires": [],
            "position": [
                1537.0358810424805,
                1316.1748838424683
            ],
            "title": "Běžkaři v Praze!",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "27-Z4-4",
            "taskReference": "27-Z4-4",
            "requires": [],
            "position": [
                1926.5568771362305,
                1638.4506406784058
            ],
            "title": "Koňské skoky",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "28-1-1",
            "taskReference": "28-1-1",
            "requires": [
                "31-Z3-2"
            ],
            "position": [
                -1466.3759460449219,
                2070.675811767578
            ],
            "title": "Jízda na biomotorce",
            "comment": "Prohledávání statového prostoru - hledání cesty v obohacneném grafu",
            "hidden": false,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "28-1-5",
            "taskReference": "28-1-5",
            "requires": [],
            "position": [
                3141.7210693359375,
                1384.8628234863281
            ],
            "title": "Likvidace plísně",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "28-2-5",
            "taskReference": "28-2-5",
            "requires": [],
            "position": [
                3142.8306884765625,
                1468.0805358886719
            ],
            "title": "Hlídání věznice",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "28-3-5",
            "taskReference": "28-3-5",
            "requires": [],
            "position": [
                2997.4769287109375,
                1470.2995910644531
            ],
            "title": "Závaží z fošen",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "28-4-4",
            "taskReference": "28-4-4",
            "requires": [],
            "position": [
                2814.3980712890625,
                1494.7102355957031
            ],
            "title": "Podivuhodný obraz",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "28-5-6",
            "taskReference": "28-5-6",
            "requires": [],
            "position": [
                2634.6475830078125,
                1501.3675842285156
            ],
            "title": "Sloty na iridium",
            "hidden": true,
            "points": 11
        },
        {
            "id": "28-Z1-1",
            "type": "open-data",
            "taskReference": "28-Z1-1",
            "comment": "triviální, průchod pole",
            "requires": [
                "26-Z2-2"
            ],
            "position": [
                -1207.9468393325806,
                437.9491996765137
            ],
            "title": "Kevinův leták",
            "hidden": false,
            "points": 8
        },
        {
            "id": "28-Z1-2",
            "type": "open-data",
            "taskReference": "28-Z1-2",
            "comment": "dělitelnost",
            "requires": [],
            "position": [
                1915.1221923828125,
                -246.26241302490234
            ],
            "title": "Sářina hra",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z1-3",
            "type": "open-data",
            "taskReference": "28-Z1-3",
            "comment": "dělení a modulení",
            "requires": [],
            "position": [
                1693.821044921875,
                -248.26667022705078
            ],
            "title": "Petrovy stromy",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z1-4",
            "type": "open-data",
            "taskReference": "28-Z1-4",
            "comment": "hledání komponent souvislosti",
            "requires": [],
            "position": [
                -1429.3251876831055,
                1860.435188293457
            ],
            "title": "Zuzčina zvědavost",
            "hidden": true,
            "points": 12
        },
        {
            "id": "28-Z2-1",
            "type": "open-data",
            "taskReference": "28-Z2-1",
            "comment": "hledání podřetězce",
            "requires": [],
            "position": [
                -813.3550796508789,
                1423.0595397949219
            ],
            "title": "Před muzeem",
            "hidden": false,
            "points": 8
        },
        {
            "id": "28-Z2-2",
            "type": "open-data",
            "taskReference": "28-Z2-2",
            "comment": "Collatzova domněnka",
            "requires": [],
            "position": [
                1401.8692626953125,
                -524.0748901367188
            ],
            "title": "Práce pro Sáru",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z2-3",
            "type": "open-data",
            "taskReference": "28-Z2-3",
            "comment": "seznam sousedů, hledání kružnic dané velikosti (3)",
            "requires": [],
            "position": [
                1261.51611328125,
                -521.9762878417969
            ],
            "title": "Byli jsme tři",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z2-4",
            "type": "open-data",
            "taskReference": "28-Z2-4",
            "comment": "spojový seznam nebo eulerovský tah",
            "requires": [
                "kucharka-zakladni-spojovy-seznam"
            ],
            "position": [
                -1231.0504760742188,
                911.6030769348145
            ],
            "title": "Rozsypaná turbína",
            "points": 12
        },
        {
            "id": "28-Z3-1",
            "type": "open-data",
            "taskReference": "28-Z3-1",
            "comment": "nalezení minima a maxima",
            "requires": [],
            "position": [
                479.60821533203125,
                -825.9333801269531
            ],
            "title": "Místo oslavy",
            "hidden": true,
            "points": 8
        },
        {
            "id": "28-Z3-2",
            "type": "open-data",
            "taskReference": "28-Z3-2",
            "comment": "matematika",
            "requires": [],
            "position": [
                1811.697021484375,
                -245.26739501953125
            ],
            "title": "Zlomkovník",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z3-3",
            "type": "open-data",
            "taskReference": "28-Z3-3",
            "comment": "zjednodušení problému??",
            "requires": [],
            "position": [
                874.887451171875,
                -94.75247955322266
            ],
            "title": "Posloupnost za trest",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z3-4",
            "type": "open-data",
            "taskReference": "28-Z3-4",
            "comment": "rekurze (není to jednoduché)",
            "requires": [],
            "position": [
                982.91064453125,
                -295.6294708251953
            ],
            "title": "Zbývající úkoly",
            "hidden": true,
            "points": 12
        },
        {
            "id": "28-Z4-1",
            "type": "open-data",
            "taskReference": "28-Z4-1",
            "comment": "souřadnice",
            "requires": [],
            "position": [
                509.86163330078125,
                -157.92288208007812
            ],
            "title": "Půdorys",
            "hidden": true,
            "points": 8
        },
        {
            "id": "28-Z4-2",
            "type": "open-data",
            "taskReference": "28-Z4-2",
            "comment": "triviální průchod 2D pole",
            "requires": [],
            "position": [
                -1374.1679382324219,
                -835.1339645385742
            ],
            "title": "Vykopávky",
            "hidden": true,
            "points": 10
        },
        {
            "id": "28-Z4-3",
            "type": "open-data",
            "taskReference": "28-Z4-3",
            "comment": "binární vyhledávání, třídění",
            "requires": [
                "kucharka-zakladni-binarni-vyhledavani"
            ],
            "position": [
                -1757.1683654785156,
                837.7411041259766
            ],
            "title": "Mocniny",
            "points": 10
        },
        {
            "id": "28-Z4-4",
            "type": "open-data",
            "taskReference": "28-Z4-4",
            "comment": "dynamické programování, práce s čísly",
            "requires": [
                "kucharka-zakladni-dynamicke-programovani"
            ],
            "position": [
                -300.49859619140625,
                871.3538208007812
            ],
            "title": "Čtyřková",
            "points": 12,
            "hidden": false
        },
        {
            "type": "open-data",
            "id": "29-1-4",
            "taskReference": "29-1-4",
            "requires": [],
            "position": [
                2989.7100830078125,
                1389.3010559082031
            ],
            "title": "Zběsilý útěk",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "29-2-4",
            "taskReference": "29-2-4",
            "requires": [],
            "position": [
                2829.9320068359375,
                1408.1637878417969
            ],
            "title": "Nejsložitější záhon",
            "hidden": true,
            "points": 9
        },
        {
            "type": "open-data",
            "id": "29-3-1",
            "taskReference": "29-3-1",
            "requires": [],
            "position": [
                2981.9429931640625,
                1320.5077209472656
            ],
            "title": "Verbování",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "29-4-3",
            "taskReference": "29-4-3",
            "requires": [],
            "position": [
                2832.1510009765625,
                1337.1513366699219
            ],
            "title": "Výhružné dopisy",
            "hidden": true,
            "points": 11
        },
        {
            "type": "open-data",
            "id": "29-5-1",
            "taskReference": "29-5-1",
            "requires": [],
            "position": [
                2983.0526123046875,
                1253.9336242675781
            ],
            "title": "Holubí pošta",
            "hidden": true,
            "points": 10
        },
        {
            "id": "29-Z1-1",
            "type": "open-data",
            "comment": "Kevinova želva — triviální, průchod po 2D souřadnicích",
            "requires": [
                "label-zelvy"
            ],
            "title": "Kevinova želva",
            "position": [
                700.2163696289062,
                -542.2866516113281
            ],
            "taskReference": "29-Z1-1",
            "hidden": true,
            "points": 8
        },
        {
            "id": "29-Z1-2",
            "type": "open-data",
            "taskReference": "29-Z1-2",
            "comment": "Sářiny pamlsky — triviální, výpis přirozených čísel na základě pravidel",
            "requires": [
                "kucharka-zakladni-algoritmus"
            ],
            "position": [
                -835.7572900056839,
                289.90427017211914
            ],
            "title": "Sářiny pamlsky",
            "points": 10
        },
        {
            "id": "29-Z1-3",
            "type": "open-data",
            "comment": "Petrova statistika — ne úplně triviální, tvorba histogramu z pole",
            "requires": [
                "27-Z2-1"
            ],
            "title": "Petrova statistika",
            "position": [
                -978.1546468734741,
                863.8943252563477
            ],
            "taskReference": "29-Z1-3",
            "points": 10
        },
        {
            "id": "29-Z1-4",
            "type": "open-data",
            "comment": "Zuzčin výlet — DFS (topologické pořadí)",
            "requires": [
                "label-grafy-pracovni-poznamka",
                "31-Z3-3"
            ],
            "position": [
                -1756.5556030273438,
                1701.0331344604492
            ],
            "taskReference": "29-Z1-4",
            "title": "Zuzčin výlet",
            "hidden": false,
            "points": 12
        },
        {
            "id": "29-Z2-1",
            "type": "open-data",
            "comment": "Krocení zlé želvy — triviální, průchod po 2D souřadnicích, přímo navazuje na 29-Z1-1",
            "requires": [
                "29-Z1-1"
            ],
            "position": [
                809.9949645996094,
                -484.49127197265625
            ],
            "taskReference": "29-Z2-1",
            "title": "Krocení zlé želvy",
            "hidden": true,
            "points": 8
        },
        {
            "id": "29-Z2-2",
            "type": "open-data",
            "taskReference": "29-Z2-2",
            "comment": "Sářina volba — spíš triviální, hledání společných vlasností na dvou stejně dlouhých polích",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "position": [
                -1055.4700317382812,
                747.5017852783203
            ],
            "title": "Sářina volba",
            "points": 10
        },
        {
            "id": "29-Z2-3",
            "type": "open-data",
            "taskReference": "29-Z2-3",
            "comment": "Petr v říši divů — grafy - prohledávání (rozpad na komponenty)",
            "requires": [],
            "position": [
                -1587.7935638427734,
                1873.7192916870117
            ],
            "title": "Petr v říši divů",
            "hidden": true,
            "points": 10
        },
        {
            "id": "29-Z2-4",
            "type": "open-data",
            "taskReference": "29-Z2-4",
            "comment": "Zuzka: Cesta tam a zase zpátky — nejdelší rostoucí podposloupnost splňující podmínku, příběh i vstup připomínají 28-Z4-5",
            "requires": [],
            "position": [
                347.90077209472656,
                -454.14956760406494
            ],
            "title": "Zuzka: Cesta tam a zase zpátky",
            "hidden": true,
            "points": 12
        },
        {
            "id": "29-Z3-1",
            "type": "open-data",
            "comment": "Želva na dvorku — spíš triviální, netriviální udělat efektivně (ale asi to není třeba pro úspěch), volně navazuje na 29-Z2-1 a 29-Z1-1, průchod po 2D souřadnicích, invalidní příkazy (směrem do překážky) ignorujeme",
            "requires": [
                "26-Z4-3"
            ],
            "position": [
                -1836.4768371582031,
                -877.2572708129883
            ],
            "taskReference": "29-Z3-1",
            "title": "Želva na dvorku",
            "hidden": true,
            "points": 8
        },
        {
            "id": "29-Z3-2",
            "type": "open-data",
            "comment": "Písemka z angličtiny — voser implementovat, easy dřevorubecký řešení, optimálně trie, což na Z IMHO hard",
            "requires": [
                "26-Z2-3",
                "label-retezce"
            ],
            "position": [
                -1081.1109771728516,
                1352.20166015625
            ],
            "taskReference": "29-Z3-2",
            "title": "Písemka z angličtiny",
            "hidden": false,
            "points": 10
        },
        {
            "id": "29-Z3-3",
            "type": "open-data",
            "comment": "Šestková čísla — mega voser implementovat, spíš matematická úloha, převod dešitkových čísel do hacknutých římských",
            "requires": [],
            "position": [
                2103.496368408203,
                468.13963317871094
            ],
            "taskReference": "29-Z3-3",
            "title": "Šestková čísla",
            "hidden": true,
            "points": 10
        },
        {
            "id": "29-Z3-4",
            "type": "open-data",
            "taskReference": "29-Z3-4",
            "comment": "Zdobení stromečku — grafy - prohledávání, hledání kružnice v grafu, zmateně zadané",
            "requires": [
                "31-Z3-3"
            ],
            "position": [
                -1407.3938293457031,
                1661.9995727539062
            ],
            "title": "Zdobení stromečku",
            "hidden": false,
            "points": 12
        },
        {
            "id": "29-Z4-1",
            "type": "open-data",
            "taskReference": "29-Z4-1",
            "comment": "Šíření viru — vopruz načítat vstup, přímočaré kvadratické řešení, trochu důmyslnější optimální, podhodnocená as fuck, šíření viru v grafu",
            "requires": [],
            "position": [
                -1319.3748168945312,
                1703.6721801757812
            ],
            "title": "Šíření viru",
            "hidden": true,
            "points": 8
        },
        {
            "id": "29-Z4-2",
            "type": "open-data",
            "taskReference": "29-Z4-2",
            "comment": "Vybírání atrakcí — ezy hladový řešení, pokud si ho umíte zdůvodnit, což není úplně triviální, máme K lidí, pro každého přípustný interval a K² čísel, které každému chceme přidělit",
            "requires": [
                "kucharka-zakladni-hladovy-algoritmus"
            ],
            "position": [
                -1252.5400390625,
                358.5697937011719
            ],
            "title": "Vybírání atrakcí",
            "points": 10
        },
        {
            "id": "29-Z4-3",
            "type": "open-data",
            "comment": "Želva v akváriu — malej voser, triviální, přímo navazuje na 29-Z2-1 a 29-Z1-1, průchod po 3D souřadnicích",
            "requires": [
                "29-Z1-1",
                "29-Z2-1"
            ],
            "position": [
                665.9852294921875,
                -466.5177917480469
            ],
            "taskReference": "29-Z4-3",
            "title": "Želva v akváriu",
            "hidden": true,
            "points": 10
        },
        {
            "id": "29-Z4-4",
            "type": "open-data",
            "taskReference": "29-Z4-4",
            "comment": "Hledání součtu — ezy housenka pokud umíte číst, hledání podposloupnosti se součtem co nejbližším zadanému, celé v kladných číslech",
            "requires": [],
            "position": [
                378.12322998046875,
                -405.99293518066406
            ],
            "title": "Hledání součtu",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "30-1-4",
            "taskReference": "30-1-4",
            "requires": [
                "31-Z3-2"
            ],
            "position": [
                -1695.3423767089844,
                2065.809600830078
            ],
            "title": "Cesta v bunkru",
            "comment": "Hledání cesty v hilbertově křivce",
            "hidden": false,
            "points": 15
        },
        {
            "type": "open-data",
            "id": "30-2-4",
            "taskReference": "30-2-4",
            "requires": [],
            "position": [
                2854.3424072265625,
                980.9795227050781
            ],
            "title": "Komprimace",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "30-3-1",
            "taskReference": "30-3-1",
            "requires": [
                "30-Z4-1"
            ],
            "position": [
                -540.3052673339844,
                865.5885314941406
            ],
            "title": "Vlnění",
            "hidden": false,
            "points": 9
        },
        {
            "type": "open-data",
            "id": "30-4-5",
            "taskReference": "30-4-5",
            "requires": [
                "kucharka-zakladni-dynamicke-programovani"
            ],
            "position": [
                -404.0432434082031,
                908.7804260253906
            ],
            "title": "Frňákovník",
            "hidden": false,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "30-5-2",
            "taskReference": "30-5-2",
            "requires": [],
            "position": [
                2995.2579345703125,
                1036.4580383300781
            ],
            "title": "Útěk z trezorů",
            "hidden": true,
            "points": 11
        },
        {
            "id": "30-Z1-1",
            "type": "open-data",
            "taskReference": "30-Z1-1",
            "title": "Kevinova nepatnáctka",
            "comment": "Trivka, chození po souřadnicích",
            "requires": [],
            "position": [
                -1438.48486328125,
                -934.1595611572266
            ],
            "hidden": true,
            "points": 8
        },
        {
            "id": "30-Z1-2",
            "type": "open-data",
            "taskReference": "30-Z1-2",
            "title": "Sářiny loutky",
            "comment": "Hladový algoritmus",
            "requires": [
                "kucharka-zakladni-hladovy-algoritmus"
            ],
            "position": [
                -1396.2911376953125,
                352.57498931884766
            ],
            "points": 10
        },
        {
            "id": "30-Z1-3",
            "type": "open-data",
            "taskReference": "30-Z1-3",
            "title": "Petrovo luštění zprávy",
            "comment": "Hledání nejčastějšího výskytu ",
            "requires": [
                "31-Z1-1"
            ],
            "position": [
                -842.0139312744141,
                1200.2676391601562
            ],
            "hidden": false,
            "points": 10
        },
        {
            "id": "30-Z1-4",
            "type": "open-data",
            "taskReference": "30-Z1-4",
            "title": "Zuzčin projekt",
            "comment": "Sousednost v grafu",
            "requires": [],
            "position": [
                -1555.590576171875,
                1821.031852722168
            ],
            "hidden": true,
            "points": 12
        },
        {
            "id": "30-Z2-1",
            "type": "open-data",
            "taskReference": "30-Z2-1",
            "title": "K-k-koktavý K-K-Kevin",
            "comment": "Trivka, projít string a skippovat duplikáty",
            "requires": [],
            "position": [
                -896.0947723388672,
                1360.2849731445312
            ],
            "hidden": false,
            "points": 8
        },
        {
            "id": "30-Z2-2",
            "type": "open-data",
            "taskReference": "30-Z2-2",
            "title": "Hřiště pro tarantule",
            "comment": "Chození po souřadnicích, detekce kolizí",
            "requires": [],
            "position": [
                -1363.7678833007812,
                -770.5065765380859
            ],
            "hidden": true,
            "points": 10
        },
        {
            "id": "30-Z2-3",
            "type": "open-data",
            "taskReference": "30-Z2-3",
            "title": "Klonování pavouků",
            "comment": "Sestavení stromu a vypsání cesty do kořene",
            "requires": [
                "kucharka-zakladni-stromy"
            ],
            "position": [
                -1854.1439561843872,
                1379.1951370239258
            ],
            "points": 10
        },
        {
            "id": "30-Z2-4",
            "type": "open-data",
            "taskReference": "30-Z2-4",
            "title": "Příliš bílý displej",
            "comment": " Práce s 2d polem",
            "requires": [
                "kucharka-zakladni-prefixove-soucty-2d"
            ],
            "position": [
                -601.0655364990234,
                1091.3271789550781
            ],
            "hidden": false,
            "points": 12
        },
        {
            "id": "30-Z3-1",
            "type": "open-data",
            "taskReference": "30-Z3-1",
            "title": "Rozkolísaná produktivita",
            "comment": " Hledání dvou čísel s co největším rozdílem",
            "requires": [
                "kucharka-zakladni-reprezentace-dat"
            ],
            "position": [
                -887.2900543212891,
                507.57414281368256
            ],
            "points": 8
        },
        {
            "id": "30-Z3-2",
            "type": "open-data",
            "taskReference": "30-Z3-2",
            "title": "Podlézání Číňanům",
            "comment": "Výroba palindromu",
            "requires": [],
            "position": [
                -1004.5203552246094,
                1425.2952423095703
            ],
            "hidden": false,
            "points": 10
        },
        {
            "id": "30-Z3-3",
            "type": "open-data",
            "taskReference": "30-Z3-3",
            "title": "Teambuilding",
            "comment": "Voser implementovat, hledání klíčů na odemčení dveří",
            "requires": [],
            "position": [
                1280.2218017578125,
                -275.69879150390625
            ],
            "hidden": true,
            "points": 10
        },
        {
            "id": "30-Z3-4",
            "type": "open-data",
            "taskReference": "30-Z3-4",
            "title": "Korporátní seznamka",
            "comment": "Voser implementovat, doplňování do stringu",
            "requires": [],
            "position": [
                1161.6162109375,
                -319.74127197265625
            ],
            "hidden": true,
            "points": 12
        },
        {
            "id": "30-Z4-1",
            "type": "open-data",
            "taskReference": "30-Z4-1",
            "title": "Statistika sprintů",
            "comment": " Prefixové součty",
            "requires": [
                "kucharka-zakladni-prefixove-soucty"
            ],
            "position": [
                -650.7279815673828,
                792.3910980224609
            ],
            "hidden": false,
            "points": 8
        },
        {
            "id": "30-Z4-2",
            "type": "open-data",
            "taskReference": "30-Z4-2",
            "title": "Klíče od tělocvičny",
            "comment": "Provházení bludiště",
            "requires": [],
            "position": [
                -1704.486099243164,
                1820.3391647338867
            ],
            "hidden": true,
            "points": 10
        },
        {
            "id": "30-Z4-3",
            "type": "open-data",
            "taskReference": "30-Z4-3",
            "title": "Uhlazovací válec",
            "comment": "ProhledávánI grafu",
            "requires": [],
            "position": [
                -1405.5034790039062,
                1802.8616561889648
            ],
            "hidden": true,
            "points": 10
        },
        {
            "id": "30-Z4-4",
            "type": "open-data",
            "taskReference": "30-Z4-4",
            "title": "Ohrazení zahrádky",
            "comment": "Trivka, práce souřadnicemi",
            "requires": [],
            "position": [
                -1496.013168334961,
                -980.4257516860962
            ],
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "31-1-1",
            "taskReference": "31-1-1",
            "requires": [
                "28-Z4-4"
            ],
            "position": [
                -307.79003715515137,
                963.3498630523682
            ],
            "title": "Karkulčin byznys",
            "hidden": false,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "31-2-4",
            "taskReference": "31-2-4",
            "requires": [],
            "position": [
                2834.0651569366455,
                1105.3199558258057
            ],
            "title": "Továrna na perník",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "31-3-3",
            "taskReference": "31-3-3",
            "requires": [],
            "position": [
                2816.3295612335205,
                1194.294382095337
            ],
            "title": "Přebírání hrachu",
            "hidden": true,
            "points": 9
        },
        {
            "type": "open-data",
            "id": "31-4-3",
            "taskReference": "31-4-3",
            "requires": [],
            "position": [
                2831.4865436553955,
                1265.5330905914307
            ],
            "title": "Nejvíc spánku",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "31-5-3",
            "taskReference": "31-5-3",
            "requires": [],
            "position": [
                2658.6950397491455,
                1439.8404636383057
            ],
            "title": "Kváskový chléb",
            "hidden": true,
            "points": 13
        },
        {
            "id": "31-Z1-1",
            "type": "open-data",
            "requires": [],
            "comment": "úloha s odčítáním času",
            "title": "Zuzka a poník",
            "position": [
                -955.4177703857422,
                1124.0412368774414
            ],
            "taskReference": "31-Z1-1",
            "hidden": false,
            "points": 8
        },
        {
            "id": "31-Z1-2",
            "type": "open-data",
            "comment": "BFS (šachovnice, custom figurka, nejkratší cesta)  ",
            "requires": [
                "label-grafy-pracovni-poznamka",
                "31-Z3-3"
            ],
            "position": [
                -1489.5734252929688,
                1750.900978088379
            ],
            "taskReference": "31-Z1-2",
            "title": "Ukradený jezdec",
            "hidden": false,
            "points": 10
        },
        {
            "id": "31-Z1-3",
            "type": "open-data",
            "taskReference": "31-Z1-3",
            "comment": "průnik N intervalů (3D na kvádrech)",
            "requires": [],
            "position": [
                954.6195068359375,
                -144.04727935791016
            ],
            "title": "Průnik kvádrů",
            "hidden": true,
            "points": 10
        },
        {
            "id": "31-Z1-4",
            "type": "open-data",
            "comment": "2D pole (až na poslední vstup), hešování (piškvorky) - navazuje na 26-Z1-2",
            "requires": [
                "26-Z1-2"
            ],
            "title": "Piškvorky naslepo",
            "position": [
                -2020.3782958984375,
                -831.6977005004883
            ],
            "taskReference": "31-Z1-4",
            "hidden": true,
            "points": 12
        },
        {
            "id": "31-Z2-1",
            "type": "open-data",
            "taskReference": "31-Z2-1",
            "comment": "hešování (objednávka pizzy po dílcích, ceil(group by typ, sum, / 8)))",
            "requires": [],
            "position": [
                1182.9420166015625,
                -121.8834228515625
            ],
            "title": "Objednávka pizzy",
            "hidden": true,
            "points": 8
        },
        {
            "id": "31-Z2-2",
            "type": "open-data",
            "taskReference": "31-Z2-2",
            "comment": "2D pole (simulace tetrisu)",
            "requires": [],
            "position": [
                -1404.921630859375,
                -883.254997253418
            ],
            "title": "Tetris bez dozoru",
            "hidden": true,
            "points": 10
        },
        {
            "id": "31-Z2-3",
            "type": "open-data",
            "taskReference": "31-Z2-3",
            "comment": "ňáký šachy, předzpracování, hledání nejbližších věží a střelců in bulk - chce lepší tag",
            "requires": [],
            "position": [
                1538.612060546875,
                1107.5970458984375
            ],
            "title": "Spousta figurek",
            "hidden": true,
            "points": 10
        },
        {
            "id": "31-Z2-4",
            "type": "open-data",
            "taskReference": "31-Z2-4",
            "comment": "hledání periody v desetinném čísle",
            "requires": [],
            "position": [
                2015.843994140625,
                -246.99621963500977
            ],
            "title": "Zmatematika",
            "hidden": true,
            "points": 12
        },
        {
            "id": "31-Z3-1",
            "type": "open-data",
            "taskReference": "31-Z3-1",
            "comment": "triviální - zapamatování stringů (vybírání rýmů)",
            "requires": [],
            "position": [
                -785.7496337890625,
                1306.2216186523438
            ],
            "title": "Tvůrčí krize",
            "hidden": false,
            "points": 8
        },
        {
            "id": "31-Z3-2",
            "type": "open-data",
            "comment": "DFS (hledání cesty v grafu po písmenech)",
            "requires": [
                "label-grafy-pracovni-poznamka",
                "29-Z1-4"
            ],
            "position": [
                -1700.6085815429688,
                1758.8020553588867
            ],
            "taskReference": "31-Z3-2",
            "title": "Zámek obrazovky",
            "hidden": false,
            "points": 10
        },
        {
            "id": "31-Z3-3",
            "type": "open-data",
            "comment": "barvení bipartitního grafu (hledání partit), na vstupu hrany",
            "requires": [
                "26-Z1-4",
                "label-grafy"
            ],
            "position": [
                -1578.4241943359375,
                1580.5398635864258
            ],
            "taskReference": "31-Z3-3",
            "title": "Stáda hrochů",
            "hidden": false,
            "points": 10
        },
        {
            "id": "31-Z3-4",
            "type": "open-data",
            "taskReference": "31-Z3-4",
            "comment": "geometrie - přihrádky/zametání (vypsat všechny dvojice bodů s vzdáleností max K)",
            "requires": [],
            "position": [
                1578.9122924804688,
                -95.89800453186035
            ],
            "title": "Pohyb termitů",
            "hidden": true,
            "points": 12
        },
        {
            "id": "31-Z4-1",
            "type": "open-data",
            "taskReference": "31-Z4-1",
            "comment": "sort + průchod pole (nejosamělejší bod na přímce)",
            "requires": [],
            "position": [
                -2195.6627292633057,
                -337.2542724609375
            ],
            "title": "Nejosamělejší kamarád",
            "hidden": true,
            "points": 8
        },
        {
            "id": "31-Z4-2",
            "type": "open-data",
            "taskReference": "31-Z4-2",
            "comment": "binární čísla",
            "requires": [],
            "position": [
                1997.0789184570312,
                -401.4818534851074
            ],
            "title": "Závažíčka na druhou",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "31-Z4-3",
            "taskReference": "31-Z4-3",
            "requires": [],
            "position": [
                2100.9113483428955,
                959.3583469390869
            ],
            "title": "Probíhání bludištěm",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "31-Z4-4",
            "taskReference": "31-Z4-4",
            "requires": [],
            "position": [
                -1727.5051555633545,
                -771.7367458343506
            ],
            "title": "Ohnivý únik",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-1-1",
            "taskReference": "32-1-1",
            "requires": [],
            "position": [
                2661.3799362182617,
                1371.441668510437
            ],
            "title": "Zkomolené vysílání",
            "hidden": true,
            "points": 9
        },
        {
            "type": "open-data",
            "id": "32-2-2",
            "taskReference": "32-2-2",
            "requires": [],
            "position": [
                2643.378776550293,
                1020.5429258346558
            ],
            "title": "Mezihvězdné jízdní řády",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-3-1",
            "taskReference": "32-3-1",
            "requires": [],
            "position": [
                2664.883659362793,
                1095.0409727096558
            ],
            "title": "Zkrat",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-4-4",
            "taskReference": "32-4-4",
            "requires": [],
            "position": [
                2663.977165222168,
                1238.3524961471558
            ],
            "title": "Zpětný signál",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-5-5",
            "taskReference": "32-5-5",
            "requires": [],
            "position": [
                2661.115348815918,
                1161.6302671432495
            ],
            "title": "Druhá kostra",
            "hidden": true,
            "points": 14
        },
        {
            "type": "open-data",
            "id": "32-5-6",
            "taskReference": "32-5-6",
            "requires": [],
            "position": [
                2621.313835144043,
                872.6725034713745
            ],
            "title": "Geocaching s odhadem",
            "hidden": true,
            "points": 13
        },
        {
            "type": "open-data",
            "id": "32-Z1-1",
            "taskReference": "32-Z1-1",
            "requires": [],
            "position": [
                1974.0358810424805,
                1299.1748838424683
            ],
            "title": "Kevin v papírnictví",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "32-Z1-2",
            "taskReference": "32-Z1-2",
            "requires": [],
            "position": [
                1811.3229904174805,
                1541.597918510437
            ],
            "title": "Chybná účtenka",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z1-3",
            "taskReference": "32-Z1-3",
            "requires": [],
            "position": [
                1703.0358810424805,
                1486.1748838424683
            ],
            "title": "Školní knihy",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z1-4",
            "taskReference": "32-Z1-4",
            "requires": [],
            "position": [
                -1980.3903579711914,
                -747.920407295227
            ],
            "title": "Plánek školy",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-Z2-1",
            "taskReference": "32-Z2-1",
            "requires": [],
            "position": [
                2135.0358810424805,
                1187.1748838424683
            ],
            "title": "Prší",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "32-Z2-2",
            "taskReference": "32-Z2-2",
            "requires": [
                "26-Z2-1"
            ],
            "position": [
                -884.8658447265625,
                953.0592222213745
            ],
            "title": "Turnaj hada",
            "hidden": false,
            "points": 10,
            "comment": "Dost hustý voser :D"
        },
        {
            "type": "open-data",
            "id": "32-Z2-3",
            "taskReference": "32-Z2-3",
            "requires": [],
            "position": [
                2249.0715255737305,
                1085.897723197937
            ],
            "title": "Panika v chodbě",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z2-4",
            "taskReference": "32-Z2-4",
            "requires": [],
            "position": [
                1791.0358810424805,
                891.1748838424683
            ],
            "title": "Opisování v testu",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-Z3-1",
            "taskReference": "32-Z3-1",
            "requires": [],
            "position": [
                1890.0358810424805,
                780.1748838424683
            ],
            "title": "Tiskařský stroj",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "32-Z3-2",
            "taskReference": "32-Z3-2",
            "requires": [],
            "position": [
                -1923.463508605957,
                -680.0054445266724
            ],
            "title": "Sářina omalovánka",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z3-3",
            "taskReference": "32-Z3-3",
            "requires": [],
            "position": [
                1818.3389205932617,
                1664.9903135299683
            ],
            "title": "Akční ceny",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z3-4",
            "taskReference": "32-Z3-4",
            "requires": [],
            "position": [
                2234.3491134643555,
                1555.8555479049683
            ],
            "title": "Dálnice",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "32-Z4-1",
            "taskReference": "32-Z4-1",
            "requires": [],
            "position": [
                1670.0358810424805,
                838.1748838424683
            ],
            "title": "Jednobarevné praní",
            "hidden": true,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "32-Z4-2",
            "taskReference": "32-Z4-2",
            "requires": [],
            "position": [
                2158.0358810424805,
                1266.1748838424683
            ],
            "title": "Hoří chleba?",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z4-3",
            "taskReference": "32-Z4-3",
            "requires": [],
            "position": [
                1983.432487487793,
                1387.0375547409058
            ],
            "title": "Esej do bloku",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "32-Z4-4",
            "taskReference": "32-Z4-4",
            "requires": [],
            "position": [
                -1863.650032043457,
                -807.0081300735474
            ],
            "title": "Bomberman uklízí",
            "hidden": true,
            "points": 12
        },
        {
            "type": "open-data",
            "id": "33-Z1-1",
            "taskReference": "33-Z1-1",
            "requires": [
                "28-Z1-1",
                "kucharka-zakladni-fronta-a-zasobnik"
            ],
            "position": [
                -1611.5377655029297,
                1026.5313749313354
            ],
            "title": "Kontrola závorkových programů",
            "hidden": false,
            "points": 8
        },
        {
            "type": "open-data",
            "id": "33-Z1-2",
            "taskReference": "33-Z1-2",
            "requires": [],
            "position": [
                1519.4436569213867,
                935.2396421432495
            ],
            "title": "Sobotní den železnice",
            "hidden": true,
            "points": 10
        },
        {
            "type": "open-data",
            "id": "33-Z1-3",
            "taskReference": "33-Z1-3",
            "requires": [],
            "position": [
                -2137.659980773926,
                -755.8007020950317
            ],
            "title": "Petrův zmatený výlet",
            "hidden": true,
            "points": 12
        },
        {
            "id": "33-Z2-1",
            "type": "open-data",
            "comment": "...",
            "requires": [
                "kucharka-zakladni-fronta-a-zasobnik"
            ],
            "title": "Stánkař",
            "taskReference": "33-Z2-1",
            "position": [
                -1419.40966796875,
                978.503662109375
            ],
            "points": 8
        },
        {
            "id": "33-Z2-3",
            "type": "open-data",
            "comment": "...",
            "requires": [
                "kucharka-zakladni-binarni-vyhledavani"
            ],
            "title": "Rostoucí funkce",
            "taskReference": "33-Z2-3",
            "position": [
                -1624.40966796875,
                840.503662109375
            ],
            "points": 12
        },
        {
            "id": "algoritmy",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Algoritmy",
            "htmlContent": "<h2>Algoritmy</h2><p>Každý program je vlastně popis nějakého pracovního postupu. Té samotné myšlence, oddělené od konkrétního způsobu implementace, říkáme <strong>algoritmus</strong>.</p><p>Algoritmy jsou principy, které zůstávají stejné neustále. Algoritmy vymyšlené před 50 lety jsou často stále to nejlepší, co známe. Často i to nejlepší, co je vůbec možné. Proto dává smysl zabývat se studiem samotných algoritmů. Programovací jazyky se mění. Metoda zápisu toho samého algoritmu často také. Ale základní myšlenka je pořád stejná.</p>",
            "position": [
                -698.2805023193359,
                -922.5820579528809
            ],
            "hidden": true
        },
        {
            "id": "current-tasks-h-label",
            "type": "label",
            "comment": "Speciální label. Zobrazený podle situace",
            "requires": [
                "current-tasks-label"
            ],
            "title": "Hlavní kategorie",
            "position": [
                943.3304443359375,
                253.30059814453125
            ]
        },
        {
            "id": "current-tasks-label",
            "type": "label",
            "comment": "Speciální popisek. Otextovaný podle situace.",
            "requires": [],
            "title": "Aktuální úlohy",
            "position": [
                1054.0210571289062,
                128.3130645751953
            ],
            "hidden": true
        },
        {
            "id": "current-tasks-z-label",
            "type": "label",
            "comment": "Speciální popisek",
            "requires": [],
            "title": "Začátečnická kategorie",
            "position": [
                1204.3304443359375,
                253.30059814453125
            ]
        },
        {
            "id": "data",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Datové struktury",
            "htmlContent": "<p>Ruku v ruce s algoritmy jdou data. Nemít data, tak nemáme co počítat, že?</p><h2>Data v počítači</h2><p>Data, nad kterými v programu pracujeme, ukládáme do paměti. Fyzicky je pamět hodně dlouhá posloupnost jedniček a nul – bitů. To je ale nepraktické a tak bity skupinkujeme do bytů – 8 bitů aneb čísel od 0 do 255.</p><p>Takže paměť je jen hodně číslíček za sebou, jak ale tedy vznikají například obrázky, na které na monitoru koukáme? Jak vlastně můžeme reprezentovat větší čísla než 255? Jednou z možností je například zapisovat si jednotlivé cifry velkého čísla. Ještě pak potřebujeme vědět, kolik jich je, ale tuhle informaci si můžeme uložit například na začátek.</p><p>FIXME obrázek</p><p>Právě jsme si popsali, jak z jednoduchých základních kamenů, posloupnosti malých čísel, postavit něco většího. Něco, čemu vznešeně říkáme datová struktura.</p><h2>Datové struktury</h2><p>Datové struktury popisují, jak reprezentovat nějaké komplexní informace z jednodušších bloků (na nejnižší úrovni z posloupnosti čísel). Velmi blízce souvisí s algoritmy. Mnoho algoritmů by nám bez datových struktur bylo k ničemu a naopak mnoho datových struktur by nedávalo smysl bez algoritmů. My si proto budeme povídat o datových strukturách a algoritmech společně.</p><p>Úlohy, které najdeš dále, se zabývají nějakou datovou strukturou nebo algoritmem. Jsou uspořádány s rostoucí obtížností a může se stát, že pro pochopení složitějších úloh je často potřeba mít vštípené detaily struktury předchozí.</p>",
            "position": [
                -696.7079391479492,
                -876.2786036729813
            ],
            "hidden": true
        },
        {
            "id": "jak-muzu-pomoct",
            "type": "text",
            "comment": "...",
            "requires": [],
            "title": "Chtěl(a) bych na kurzu něco změnit!",
            "htmlContent": "<p>To vůbec není problém. Dokonce naopak, rádi uvítáme libovolné názory, nápady a úpravy. Zdrojové kódy webové aplikace <a href=\"https://github.com/ksp/kurz\">jsou veřejně přístupné na GitHubu</a> a jakkoukoliv pomoc uvítáme.</p><h3>Chci nahlásit chybu</h3><p>Kontaktuj nás libovolným možným způsobem. 😉 Discord, email, GitHub, Česká pošta,… Ať už zpráva dorazí jakkoliv, tak pokud si jí všimneme, budeme se snažit reagovat.</p><h3>Chci změnit obsah (napojení a umístění úloh, texty, …)</h3><p>Na úpravu obsahu jsme si napsali také webový editor. Můžeš si ho spustit buď lokálně u sebe nebo použít naše testovací prostředí.</p><h4>Naše testovací prostředí</h4><p>Můžeš se na stránce<strong> </strong><a href=\"https://ksp.vsq.cz/\"><strong>https://ksp.vsq.cz/</strong></a> najdeš veřejně přístupnou proxy, která upravuje data proudící mezi Tvým prohlížečem a stránkami KSPčka. Vkládá tam tak vždy nejnovější verzi webové aplikace. Editor najdeš na <a href=\"https://ksp.vsq.cz/editor.html\"><strong>https://ksp.vsq.cz/editor.html</strong></a>.</p><p>Pokud chceš data uložit, můžeš si stáhnout lokálně soubor <i>tasks.json</i> a poslat ho <a href=\"https://ksp.mff.cuni.cz/kontakty/organizatori/\">Vaškovi Šraierovi nebo Standovi Lukešovi</a>. Případně udělat Pull Request na GitHubu.</p><p>Pokud chceš, aby editor Tvé změny zachovával mezi reloady stránky, musíš se přihlásit do svého KSPího účtu. Záměrně ale varujeme, že proxy pak má teoretickou možnost zjistit Tvé přihlašovací údaje.</p><h4>Lokální spuštění</h4><p>Pro lokální spuštění najdeš vše potřebné v <a href=\"https://github.com/ksp/kurz/blob/master/README.md\">README.md na GitHubu</a>.</p><p>&nbsp;</p>",
            "position": [
                7,
                -105
            ]
        },
        {
            "id": "KSP-h-ulohy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "KSP-H úlohy",
            "position": [
                2788.8524503707886,
                782.6888427734375
            ],
            "hidden": true
        },
        {
            "id": "kucharka-zakladni-algoritmus",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "ulohy-v-kurzu"
            ],
            "title": "Algoritmus",
            "htmlContent": "<h3>Algoritmus a&nbsp;program</h3><p>Pod tajemným slovem <i>algoritmus</i> se skrývá jen jiný výraz pro postup. Můžete si to představit jako příkaz od maminky „Běž do krámu, kup chleba, a&nbsp;když budou mít měkké rohlíky, tak jich vem tucet“. (A jako slušně vychovaní se tedy vydáte do krámu a&nbsp;koupíte tucet chlebů, protože měli měkké rohlíky :-))</p><p>Takovýto příkaz klidně můžeme nazvat algoritmem, ačkoliv to bude asi znít nezvykle&nbsp;– pojem algoritmus se totiž používá hlavně ve světě počítačů. Je to tedy nějaká posloupnost základních příkazů, která řeší nějaký problém. Výběr konkrétního programovacího jazyka rozhoduje o&nbsp;tom, jaké základní příkazy budeme mít k&nbsp;dispozici. Většinou jsou ale skoro stejné.</p><p>Mezi základní příkazy patří:</p><ul><li>Manipulace s&nbsp;daty v&nbsp;paměti (uložení či načtení hodnoty, detailněji v&nbsp;další kapitole).</li><li>Provedení nějakého numerického výpočtu (+,-,*,/).</li><li>Vyhodnocení nějaké konkrétní podmínky a&nbsp;odpovídající větvení programu: <i>Pokud platí A, tak proveď B, jinak proveď C.</i> Přitom B&nbsp;i&nbsp;C mohou být klidně celé <i>bloky kódu</i>, tedy libovolně mnoho dalších základních příkazů.</li><li>Opakování nějakého příkazu: <i>Dokud platí A, dělej B.</i> Takové konstrukci říkáme <i>cyklus</i> a&nbsp;podobně jako u&nbsp;podmínky může být B&nbsp;blok kódu, který se celý opakuje.</li><li>Vstup a&nbsp;výstup programu (typicky vstup od uživatele z&nbsp;klávesnice či načtení vstupu ze souboru; výstup pak může znamenat vypsání výsledku na obrazovku nebo třeba zapsání dat do souboru).</li></ul><p>Z&nbsp;těchto základních stavebních kamenů se skládá každý algoritmus. Programem potom rozumíme realizaci algoritmu v&nbsp;nějakém konkrétním programovacím jazyce.</p><p>U&nbsp;složitějších programů se pak často setkáme s&nbsp;problémem, že budete mít nějakou posloupnost příkazů, která se bude na spoustě míst programu opakovat, což zbytečně prodlužuje a znepřehledňuje kód.</p><p>Řešením tohoto problému je použití <i>funkcí</i>. Funkci si můžeme představit jako nějakou pojmenovanou část programu (s&nbsp;vlastní pamětí), kterou můžeme opakovaně použít tím, že ji v&nbsp;různých částech programu <i>zavoláme</i>. Funkci při zavolání předáme parametry (například seznam čísel), které se dostanou do její vnitřní paměti.</p><p>Funkce pak na základě obdržených parametrů může provádět nějaké operace, při kterých pracuje se svojí vnitřní pamětí (mluvíme o&nbsp;<i>lokální</i> paměti, změny v&nbsp;ní se neprojeví nikde mimo funkci). Na konci nám funkce může vrátit nějaký výsledek. Pokud funkce během svého běhu změní i nějaká data v&nbsp;<i>globální</i> paměti, či provede nějakou globální operaci (například výpis textu na monitor), mluvíme pak o&nbsp;funkci s&nbsp;<i>vedlejšími efekty</i> (neboli side-efekty).</p><p>Konkrétním příkladem může být funkce, která nám spočítá odmocninu ze zadaného čísla. Ta dostane jako svůj parametr číslo, uvnitř si provede nějaký výpočet, o&nbsp;který se jako uživatel funkce nemusíme starat, a&nbsp;jako výstup nám vrátí spočtenou odmocninu.</p>",
            "position": [
                -1034.2832489013672,
                231.77413177490234
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-binarni-vyhledavani",
            "type": "text",
            "comment": "...",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Rozděl a panuj - binární vyhledávání",
            "htmlContent": "<h3>Rozděl a&nbsp;panuj</h3><p>Jednou ze základních technik je rozdělení složitějšího problému na menší části, které opět můžeme rozdělit na menší a&nbsp;tak dále, dokud se nedostaneme k&nbsp;problémům tak malým, že je už umíme triviálně vyřešit.</p><h4>Binární vyhledávání v&nbsp;poli</h4>\n\n            <p>\n            Představme si, že máme seřazené pole <span class='math'>n</span>&nbsp;prvků a&nbsp;chceme zjistit, jestli se v&nbsp;něm\n            nachází prvek s&nbsp;hodnotou&nbsp;<span class='math'>k</span>. Určitě můžeme projít celé pole v&nbsp;lineárním čase\n            (tím, že budeme brát jeden prvek za druhým a&nbsp;kontrolovat, zda je roven\n            hodnotě&nbsp;<span class='math'>k</span>), ale to je zbytečně pomalé a&nbsp;nevyužívá toho, že máme pole seřazené.</p>\n            \n            <p>\n            Můžeme totiž začít s&nbsp;velkým problémem a&nbsp;ten postupně zmenšovat na stále menší\n            a&nbsp;menší. Nejdříve hledáme&nbsp;<span class='math'>k</span> v&nbsp;celém poli. Podíváme se na jeho prostřední\n            prvek:</p>\n            <ul><li>Pokud je roven&nbsp;<span class='math'>k</span>, jsme hotovi.</li>\n            <li>Je-li větší než&nbsp;<span class='math'>k</span>, víme, že se <span class='math'>k</span>&nbsp;musí nacházet nalevo od něj. Můžeme tedy\n            hledat znovu, ale tentokrát se omezit jen na levou polovinu pole.</li>\n            <li>Analogicky, je-li menší než&nbsp;<span class='math'>k</span>, můžeme hledat jen v&nbsp;pravé polovině.</li>\n            </ul>\n            \n            <p>\n            Když tímto postupným dělením problémů na menší dojdeme až k&nbsp;poli o&nbsp;velikosti\n            jednoho prvku, stačí tento prvek jenom porovnat, dál už se pole nepokoušíme\n            rozdělovat.</p>\n            \n            <p>\n            Jelikož se nám každým krokem problém zmenší na polovinu, maximálně po\n            <span class='math'> <span class='nomath'>log</span> n</span> krocích se dostaneme na pole velikosti jedna. Říkáme, že algoritmus má\n            <i>logaritmickou časovou složitost</i>, píšeme <span class='math'>O(<span class='nomath'>log</span> n)</span>. (Pokud není řečeno jinak, znamená pro nás v&nbsp;informatice značka <span class='math'> <span class='nomath'>log</span> </span>\n            <i>dvojkový logaritmus</i>, což je funkce opačná k&nbsp;funkci <span class='math'>2<sup>n</sup></span> a&nbsp;roste o&nbsp;hodně\n            pomaleji než funkce lineární. Pro velká&nbsp;<span class='math'>n</span> platí: <span class='math'>1 &lt;  <span class='nomath'>log</span> n &lt; n</span> a&nbsp;například\n            <span class='math'> <span class='nomath'>log</span> 2 = 1,  <span class='nomath'>log</span> 8 = 3,  <span class='nomath'>log</span> 1024 = 10</span>.)</p>\n            \n            <p>\n            Prakticky postup provádíme tak, že si udržujeme levý a&nbsp;pravý okraj aktuálně\n            zpracovávaného úseku a&nbsp;postupně je k&nbsp;sobě přibližujeme.</p><div class='code language-python'>Ukázka v&nbsp;Pythonu jako funkce vracející index prvku nebo <span class='math'>-1</span>, pokud hledané\n            číslo nenalezne:\n            <pre>\n<code>def bin_vyhled(pole, hledane,\n               levy_index=0, pravy_index=None):\n    if pravy_index is None:\n                    pravy_index = len(pole)\n    while levy_index &lt; pravy_index:\n        prostredni = (levy_index +\n                      pravy_index) // 2\n        x = pole[prostredni]\n        if x &lt; hledane:\n            levy_index = prostredni + 1\n        elif x &gt; hledane:\n            pravy_index = prostredni\n        else:\n            return prostredni\n    return -1\n\n# Zavolání:\nprint(bin_vyhled([1,2,5,7, 8,12,16,42], 1))\n</code></pre></div><h4>Další aplikace</h4><p>Další typickou aplikací postupu rozděl a&nbsp;panuj je například třídění posloupnosti pomocí <i>Mergesortu</i>. Ten v&nbsp;základu funguje tak, že každou posloupnost, kterou dostane k&nbsp;setřídění, rozdělí na poloviny a každou z&nbsp;nich setřídí rekurzivním zavoláním sebe sama. Zanořování se zastaví ve chvíli, kdy třídíme posloupnost délky jedna (ta už je z&nbsp;podstaty setříděná). Pak jen v&nbsp;každém kroku ze dvou setříděných menších posloupností vyrobí jejich sléváním setříděnou posloupnost dvojnásobné délky.</p><p>Více se o&nbsp;metodě Rozděl a&nbsp;panuj můžete dozvědět ve stejnojmenné <a href=\"/viz/kucharky/rozdel-a-panuj\">kuchařce</a>.</p>",
            "position": [
                -1678.6361999511719,
                744.8667259216309
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-dynamicke-programovani",
            "type": "text",
            "comment": "...",
            "requires": [
                "kucharka-zakladni-prefixove-soucty"
            ],
            "title": "Dynamické programování",
            "htmlContent": "<h3>Předpočítané mezivýsledky</h3><p>Motivací k&nbsp;této kapitole je následující motto: „Proč počítat něco vícekrát, když nám to stačí spočítat jednou a&nbsp;zapamatovat si to?“.</p><p>Velmi často se totiž setkáváme s&nbsp;tím, že něco počítáme stále dokola. Jako příklad si můžeme připomenout naši rekurzivní implementaci počítání Fibonacciho čísel zmíněnou výše.</p><p>Když se podíváme na výpočet čísla fib(5), vidíme, že pro něj voláme fib(4) a&nbsp;fib(3), fib(4) volá fib(3) a&nbsp;fib(2), fib(3) volá fib(2) a&nbsp;fib(1) a&nbsp;tak dále. Všimli jste si, kolikrát se nám tyhle výpočty opakují? Některá Fibonacciho čísla spočteme totiž zbytečně mnohokrát.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-5.png\" alt=\"Strom výpočtu Fibonacciho čísla\"></figure><p>Kdybychom si je namísto opakovaného počítání někde pamatovali, mohli bychom pak odpověď na dotaz na již vypočtené číslo vytáhnout jako králíka z&nbsp;klobouku v&nbsp;konstantním čase. Zavedením jednoho globálního pole, ve kterém si tyto hodnoty pro jednotlivá n budeme pamatovat, nám sníží časovou složitost z&nbsp;O(2n) na pěkných O(n). Takovému postupu se obecně říká <i>dynamické programování</i>.</p><h4>Dynamické programování</h4><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/img/hippo_dynamit.png\" alt=\"Dynamitské programování\"></figure><p>Nejprve uveďme na pravou váhu výraz „dynamické“ v&nbsp;názvu. Nevystihuje tak úplně podstatu této techniky a jeho historické pozadí je celkem složité, avšak dnes je tento název již tak zažitý, že se už pravděpodobně nezmění.</p><p>Slovo „dynamické“ částečně odkazuje na to, že se dynamicky (za běhu programu) postupně staví řešení jednodušších problémů, která jsou následně použita pro řešení složitějších. Jeho hlavní podstatou je tedy ukládání a&nbsp;opětovné použití již jednou vypočtených údajů.</p><p>Hodí se na úlohy, které se dají dělit na podúlohy, které jsou si podobné a&nbsp;mohou se opakovat. Výsledky takovýchto podúloh si poté ukládáme a&nbsp;při dotazu na stejnou podúlohu vrátíme jen uložený výsledek a&nbsp;výpočet již neprovádíme.</p><p>Pro další prohloubení znalostí můžete na našem webu nahlédnout do další kuchařky, tentokrát nesoucí (překvapivě) název <a href=\"https://ksp.mff.cuni.cz/viz/kucharky/dynamicke-programovani\">Dynamické programování</a>.</p>",
            "position": [
                -359.7817916870117,
                809.1784515380859
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-fronta-a-zasobnik",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-spojovy-seznam"
            ],
            "title": "Fronta a zásobník",
            "htmlContent": "<h4>Fronta a zásobník</h4><p>S&nbsp;použitím spojových seznamů (nebo v&nbsp;jednodušším případě dokonce i polí) můžeme zkonstruovat dvě velmi užitečné datové struktury, frontu a zásobník.</p><p><i>Fronta</i> funguje tak, jak si ji asi každý z&nbsp;nás představuje: ten, kdo se do fronty postaví první, také první přijde na řadu. Trochu jinak si ji můžeme představit jako trubku, do které na jedné straně sypeme nějaké věci a na druhé je odebíráme. Anglicky je též nazývaná <i>FIFO</i> (<i>„First In, First Out“</i>).</p><p>Praktickou realizaci uděláme jednoduše spojovým seznamem. Budeme si držet dva ukazatele, jeden na začátek seznamu, druhý na konec. Když se objeví nový prvek, který do fronty budeme chtít vložit, přidáme ho na konec, zatímco při odebírání z&nbsp;fronty využijeme druhého ukazatele a vezmeme prvek ze začátku.</p><p>Druhou velmi podobnou datovou strukturou je <i>zásobník</i>. Jak už ale plyne z&nbsp;anglického názvu <i>LIFO</i> (<i>„Last In, First Out“</i>), funguje spíše jako plný šuplík: Nahoru do něj přidáváme nové prvky, a když chceme nějaký odebrat, vezmeme také zvrchu. To znamená, že první se na řadu dostane naposledy vložený prvek.</p><p>Implementace je velmi obdobná jako u&nbsp;fronty, jen bude ukazatel pouze jeden a&nbsp;bude ukazovat jenom na jeden konec spojového seznamu, konkrétně na poslední prvek.</p>",
            "position": [
                -1399.207176208496,
                907.6757850646973
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-grafy",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "28-Z2-4"
            ],
            "title": "Grafy",
            "htmlContent": "<h4>Grafy</h4><p>S&nbsp;nějakými grafy jste se již možná potkali, ale tento pojem je bohužel docela přetěžovaný. Jedním jeho významem jsou „koláčové grafy“ a&nbsp;jiné další diagramy znázorňující nějaký poměr (ať už to jsou výsledky voleb, nebo poměr lidí, kteří sledovali v&nbsp;televizi Večerníček).</p><p>Další význam můžeme nalézt v&nbsp;analytické matematice, kde se potkáme s&nbsp;grafy průběhu nějakých funkcí. My však nemáme na mysli ani jedno z&nbsp;výše zmíněných, teď se budeme bavit o&nbsp;<i>kombinatorických grafech</i>.</p><p>Grafem tedy máme na mysli nějakou množinu objektů, říkejme jim <i>vrcholy</i>, a&nbsp;nějaké vztahy mezi nimi. Tyto vztahy nazýváme <i>hranami</i> a&nbsp;jsou vyjádřené dvojicemi vrcholů, mezi kterými vedou. Ukázku takového grafu vidíme třeba na následujícím obrázku.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-3.png\" alt=\"Graf\"></figure><p>Jako praktickou ukázku grafu si můžeme například představit silniční síť nějakého státu: vrcholy budou města a&nbsp;hrany budou silnice, které mezi nimi vedou.</p><p>Občas se můžete setkat s&nbsp;pojmem <i>souvislý</i> graf. Ten znamená jen to, že mezi každými dvěma vrcholy existuje nějaká cesta. Pokud tomu tak není, je graf <i>nesouvislý</i> a&nbsp;dá se rozložit na několik menších grafů, které již souvislé jsou a&nbsp;říká se jim <i>komponenty souvislosti</i>.</p><p>Samotný graf poté můžeme doplnit tím, že si v&nbsp;každém vrcholu nebo na každé hraně budeme pamatovat nějakou hodnotu (například cenu nejlevnějšího benzínu ve městech a&nbsp;délku v&nbsp;kilometrech na silnicích). Pamatování si hodnot ve vrcholech je docela obvyklá technika a nemá speciální název, ale pokud budeme mít graf, který si pamatuje hodnoty na hranách, budeme o&nbsp;něm mluvit jako o&nbsp;<i>ohodnoceném grafu</i>.</p><p>Další možnou úpravou je, že každá hrana povede jen jedním směrem (jednosměrné silnice), takovým grafům říkáme <i>orientované</i> (pokud pak v&nbsp;orientovaném grafu chceme silnici oběma směry, prostě do něj přidáme dvě hrany, jednu v&nbsp;každém směru).</p><p>Poslední, co nám schází k&nbsp;praktickému použití grafů, je naučit se, jak je reprezentovat v&nbsp;počítači. Existuje několik možností (v popisech bude n značit počet vrcholů, m&nbsp;počet hran):</p><ul><li><strong>Seznam sousedů</strong>&nbsp;– vrcholy grafu budeme mít uložené v&nbsp;poli a&nbsp;u&nbsp;každého vrcholu budeme mít (spojový) seznam čísel dalších vrcholů, do kterých z&nbsp;aktuálního vrcholu vede hrana. Zabírá místo O(n+m) a&nbsp;hodí se pro řídké grafy (tedy grafy, kde je m&nbsp;řádově stejné jako&nbsp;n).</li><li><strong>Matice sousednosti</strong>&nbsp;– tabulka n×n, kde na souřadnicích [i,j] je jednička (nebo jiná hodnota, v&nbsp;případě ohodnoceného grafu), pokud z&nbsp;i do j vede hrana, a&nbsp;nula, pokud tam hrana není (u&nbsp;neorientovaných grafů je navíc matice symetrická&nbsp;– je jedno, jestli vezmeme [i,j] nebo [j,i]). Hodí se pro husté grafy, kde m~n2.</li><li><strong>Matice incidence</strong>&nbsp;– řádky reprezentují vrcholy, sloupce hrany. V&nbsp;každém sloupci jsou právě dvě jedničky&nbsp;– indexy vrcholů, mezi kterými hrana vede. Zabírá však O(mn) a její použití bývá dost neohrabané, takže je většinou lepší dát přednost jiné reprezentaci grafu. Je ale dobré o&nbsp;ní vědět.</li></ul><p>Grafy jsou velmi široké téma. Můžeme hledat jejich minimální kostry, můžeme v&nbsp;nich hledat nejkratší cesty či skrze ně pouštět pod tlakem vodu. Více o&nbsp;nich si tedy můžete přečíst v&nbsp;některé z&nbsp;našich specializovaných grafových kuchařek, které odkazujeme z&nbsp;našeho <a href=\"https://ksp.mff.cuni.cz/kucharky/\">kuchařkového rozcestníku</a>.</p>",
            "position": [
                -1432.676658630371,
                1118.9473609924316
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-hladovy-algoritmus",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-algoritmus"
            ],
            "title": "Hladové algoritmy",
            "htmlContent": "<h3>Hladové algoritmy</h3><p>Věřte nebo ne, ale i&nbsp;počítač se někdy cítí hladový. Po namáhavé práci mu můžeme dopřát to potěšení, aby si ukousl co největší kus dat. A&nbsp;ukážeme, že někdy je to i&nbsp;ku prospěchu. Řeč bude o&nbsp;<i>hladových algoritmech</i>.</p><p>Takovými algoritmy rozumíme ty, které hledají řešení celé úlohy po jednotlivých krocích a&nbsp;splňují následující dvě podmínky:</p><ul><li>V&nbsp;každém kroku zvolí lokálně nejlepší řešení.</li><li>Provedené rozhodnutí již nikdy neodvolává (tedy nebacktrackuje).</li></ul><p>Lokálně nejlepší řešení je takové, které v&nbsp;aktuálním kroku vybere tu možnost, která nám na tomto místě nejvíce pomůže (bez jakéhokoliv ohledu na globální stav). Může to být třeba nejvyšší hodnota, nebo nejkratší cesta v&nbsp;grafu.</p><p>Pokud ale od hladového algoritmu chceme, aby nám našel globálně nejlepší řešení, musí naše úloha splnit předpoklad, že si výběrem lokálně nejlepšího řešení nezhoršíme to globální. Tento předpoklad se nedá formulovat obecně a&nbsp;je nutné se nad ním zamyslet zvlášť u&nbsp;každé úlohy.</p><h4>Příklady hladových algoritmů</h4><p>První hladovou úlohou bude (jak jinak) automat na jídlo vracející mince. Automat by měl vracet peníze nazpět tak, aby vrátil daný obnos v&nbsp;co možná nejmenším počtu mincí. Pro náš měnový systém (máme mince hodnot 1, 2, 5, 10, 20 a&nbsp;50 Kč) lze tuto úlohu řešit hladovým algoritmem&nbsp;– v&nbsp;každém kroku algoritmu vrátíme tu největší minci, kterou můžeme (tedy pro vrácení 42 Kč to bude 42 = 20 + 20 +2 Kč).</p><p>Měnové systémy většiny států jsou postavené tak, aby fungovaly takto pěkně, neplatí to ale obecně. Zkusme si vrátit 42 Kč, pokud bychom měli jen mince hodnoty 20, 10 a&nbsp;4 Kč. Správným řešením je 42 = 20 + 10 + 4 + 4 +4 Kč, hladový algoritmus by ale zkusil vrátit 42 = 20 + 20 + … a&nbsp;tady by selhal.</p><p>Dále se velmi často dají hladovým algoritmem řešit nějaké úlohy přidávání nebo odebírání skupin prvků. Typickým příkladem je třeba rozvržení naplánovaných přednášek do učeben. Seřadíme si začátky přednášek podle času a&nbsp;postupně bereme jednu za druhou a&nbsp;umísťujeme je do volných učeben s&nbsp;nejnižším číslem.</p><p>Tím jsme si určitě nic nerozbili, protože v&nbsp;nějaké učebně přednáška být musí. Určitě budeme potřebovat tolik učeben, kolik je maximálně přednášek v&nbsp;jeden čas, a&nbsp;díky tomu si umístěním přednášky do nějaké učebny nezablokujeme místo pro jinou přednášku, jelikož nám vždy zbude dostatek volných učeben.</p><p>Kdybychom ale naopak měli pevně zadaný počet učeben a&nbsp;chtěli jsme do nich umístit co možná nejvíce přednášek, nejedná se již o&nbsp;úlohu řešitelnou hladovým algoritmem, v&nbsp;takovém případě je potřeba zvolit nějaký chytřejší postup.</p>",
            "position": [
                -1326.0003852844238,
                266.1149559020996
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-knihovny",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [],
            "title": "Knihovny",
            "htmlContent": "<h4>Knihovny</h4><p>Tyto základní struktury už jsou často předpřipravené jako součást určitých <i>knihoven</i> v&nbsp;daném jazyce. Knihovna je většinou sbírka nějakých navzájem souvisejících funkcí, které již někdo sepsal a&nbsp;které si můžeme do našeho programu načíst a&nbsp;používat. Ukázku načtení knihoven můžete vidět například ve výše zmíněném kódu v&nbsp;jazyce&nbsp;C.</p><p>Je ale velmi důležité rozumět tomu, jak knihovní funkce vnitřně fungují. Protože jedině když budeme vědět, co je jak rychlé a&nbsp;efektivní, budeme schopni psát rychlé programy.</p><p>Teď již víme, jak reprezentovat nejzákladnější datové struktury v&nbsp;počítači, ale mohlo by se nám hodit zastavit se ještě chvíli u&nbsp;dalších struktur. Tentokrát je už budeme studovat trochu teoretičtěji.</p>",
            "position": [
                -573.0954666137695,
                -921.101863861084
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            },
            "hidden": true
        },
        {
            "id": "kucharka-zakladni-pole",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "26-Z1-1",
                "27-Z1-1",
                "30-Z3-1"
            ],
            "title": "Pole",
            "htmlContent": "<p>První datovou strukturou, kterou si představíme a&nbsp;která se na výše nastíněnou situaci náramně hodí, je <i>pole</i>. To představuje spoustu přihrádek (proměnných) naskládaných v&nbsp;paměti za sebou, ke kterým typicky přistupujeme přes jeden společný název pole a&nbsp;jejich pořadové číslo neboli index (jako NazevPole[0], NazevPole[1], …). (Pozor, ve světě počítačů se velmi často indexuje od nuly, tedy první prvek má v&nbsp;tomto případě index 0.)</p><p>Ve většině základních jazyků je pole jen <i>statické</i>, tedy v&nbsp;okamžiku jeho vytváření musíme počítači říct, jak ho chceme velké. Některé vyšší jazyky ale nabízejí i&nbsp;pole, které se dynamicky zvětšuje, takovou konstrukci si ukážeme ve druhé části kuchařky.</p><p>Abychom nebyli omezeni jen jedním rozměrem, můžeme si klidně vyrobit pole dvourozměrné (případně obecně n-rozměrné). Dvourozměrné pole je vlastně tabulka hodnot, nazýváme ji také někdy <i>matice</i>, a&nbsp;může se nám hodit například při reprezentaci různých map (plán bludiště) nebo, jak uvidíme níže, pro reprezentaci dalších datových struktur.</p><p>U&nbsp;pole již má smysl přemýšlet, jak dlouho bude která operace trvat. Díky tomu, že jsou jednotlivé prvky v&nbsp;poli naskládané pevně za sebou, je snadné spočítat umístění konkrétní přihrádky. Proto když se počítače zeptáme na obsah přihrády pole[42], vrátí nám hodnotu ihned.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/img/hippo_array.png\" alt=\"Pole\"></figure><p>Tomu budeme říkat <i>operace v&nbsp;konstantním čase</i> a&nbsp;budeme značit, že trvá čas&nbsp;O(1). Efektivitu programu totiž nepočítáme v&nbsp;sekundách (protože každý z&nbsp;nás má asi jinak rychlý počítač), ale v&nbsp;počtu základních operací, které musí program řádově vykonat. Více o&nbsp;časové složitosti si můžete přečíst v&nbsp;<a href=\"https://ksp.mff.cuni.cz/viz/kucharky/slozitost\">kuchařce o&nbsp;složitosti</a>, nejdříve však doporučujeme dočíst tuto kuchařku.</p><p>Přidání nového prvku na konec pole také zvládneme v&nbsp;konstantním čase. Problém je přidání nového prvku někam doprostřed (což se nám typicky stane, pokud budeme chtít udržovat hodnoty v&nbsp;poli seřazené a&nbsp;zároveň do něj vkládat nové). V&nbsp;takovém případě se totiž všechny prvky za vkládaným musí posunout o&nbsp;jednu pozici dál, aby se vkládaný prvek vešel na své místo. Taková operace tedy může pro pole délky N (čili pole obsahující N prvků) trvat řádově až N kroků, což zapisujeme jako O(N) a&nbsp;říkáme, že je to vzhledem k&nbsp;N <i>lineární časová složitost</i>.</p><p>To je značná nevýhoda oproti struktuře, kterou si ukážeme za chvíli. Určitě ale pole nezavrhujme. Je to základní datová struktura, která nalezne použití ve spoustě programů, a&nbsp;jak si ve druhé části kuchařky ukážeme, můžeme ho použít třeba k&nbsp;rychlému hledání hodnoty metodou <i>binárního vyhledávání</i>. Nyní ale již slibovaná další datová struktura.</p>",
            "position": [
                -1017.7029113769531,
                646.6454200744629
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            },
            "hidden": false
        },
        {
            "id": "kucharka-zakladni-prefixove-soucty",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Prefixové součty",
            "htmlContent": "<h4>Prefixové součty</h4><p>Velmi často se nám hodí si ještě před samotným výpočtem předpočítat a&nbsp;uložit nějaké hodnoty, které poté použijeme.</p><p>Představme si například problém nalezení souvislého úseku s&nbsp;největším součtem v&nbsp;nějaké posloupnosti kladných i&nbsp;záporných čísel. Že to není úplně jednoduchý příklad, si ukažme na následující posloupnosti:</p><p>1,-2,4,5,-1,-5,2,7</p><p>Máme zde dvě ryze kladné souvislé posloupnosti, každou se součtem 9 (4,5 a&nbsp;2,7). Ale přesto je výhodnější vzít i&nbsp;nějaké záporné hodnoty a&nbsp;vytvořit tak souvislou posloupnost o&nbsp;součtu 12 (zkuste ji nalézt).</p><p>Mohlo by nás napadnout, že prostě zkusíme vzít všechny možné začátky a&nbsp;všechny možné konce. To nám dává O(n<sup>2</sup>) možných posloupností (máme n&nbsp;možných začátků a&nbsp;ke každému z&nbsp;nich řádově n&nbsp;možných konců), pro každou posloupnost si spočteme součet (to zvládneme v&nbsp;O(n)) a&nbsp;budeme si pamatovat ten největší nalezený. Celý náš postup tak trvá O(n<sup>3</sup>).</p><p>To není pro takhle jednoduchou úlohu zrovna ten nejpěknější čas, zkusme ho zlepšit. Ukážeme si, jak vypočítat součet libovolné posloupnosti v&nbsp;konstantním čase. Celý princip je vlastně až kouzelně jednoduchý, ale zároveň velmi mocný. Na začátku výpočtu si do pomocného pole P stejné délky jako posloupnost na vstupu (té říkejme S) uložíme takzvané <i>prefixové součty:</i> i-tý prefixový součet je součet prvních i+1 prvků&nbsp;S, neboli P[i] = S[0] + S[1] + … + S[i].</p><p>Pro náš ukázkový případ a&nbsp;pro vstupní pole označené S by to dopadlo takto:</p><figure class=\"table\"><table><tbody><tr><td>i</td><td>-1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>S[i]</td><td>&nbsp;</td><td>1</td><td>-2</td><td>4</td><td>5</td><td>-1</td><td>-5</td><td>2</td><td>7</td></tr><tr><td>P[i]</td><td>0</td><td>1</td><td>-1</td><td>3</td><td>8</td><td>7</td><td>2</td><td>4</td><td>11</td></tr></tbody></table></figure><p>Pole prefixových součtů umíme získat v&nbsp;linerárním čase&nbsp;– prostě jen od začátku procházíme vstupní pole, počítáme si průběžný součet a&nbsp;ten zapisujeme.</p><p>Součet libovolného úseku a…b pak získáme v&nbsp;konstantním čase jako prefixový součet od začátku do indexu&nbsp;b minus prefixový součet od začátku do indexu&nbsp;a. Zapsáno programově to pak je:</p><p>soucet = P[b] - P[a-1]; To nám umožňuje snížit čas potřebný na řešení této úlohy na O(n<sup>2</sup>). To je už lepší čas; prozradíme však, že tuto úlohu lze řešit dokonce v&nbsp;lineárním čase, ale to je již nad rámec této kuchařky.</p><h4>&nbsp;</h4>",
            "position": [
                -511.47504806518555,
                708.7667083740234
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-prefixove-soucty-2d",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "30-Z4-1"
            ],
            "title": "Dvourozměrné prefixové součty",
            "htmlContent": "<h4>Dvourozměrné prefixové součty</h4><p>Prefixové součty se dají zobecnit i&nbsp;do více rozměrů, ale princip je vždy stejný. Například dvourozměrné prefixové součty u&nbsp;matice fungují tak, že si předpočítáme součty podmatic začínajících levým vrchním políčkem a&nbsp;končící na indexu [x,y].</p><p>Z&nbsp;toho je vidět, že prefixový součet zpravidla obsadí stejně velký prostor jako původní data, v&nbsp;tomto případě tedy budeme mít matici hodnot prefixových součtů končících na zadaných souřadnicích. Jak ale získat součet nějaké podmatice, která se nachází někde „uprostřed“ naší matice?</p><p>Použijeme stejný princip jako u&nbsp;jednorozměrného případu: Přičteme větší část, kterou chceme započítat, a&nbsp;odečteme od ní části, které započítat nechceme. Pro případ podmatice začínající vlevo nahoře na pozici [x,y] a&nbsp;končící napravo dole na [X,Y] to ilustruje následující obrázek:</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-6.png\" alt=\"Dvourozměrné prefixové součty\"></figure><p>Nejdříve přičteme celý prefixový součet končící na pozici [X,Y]. Tím jsme ale započítali i&nbsp;části A, B a&nbsp;C z&nbsp;obrázku, které započítat nechceme. Tak odečteme prefixové součty končící na indexech [X,y] a&nbsp;[x,Y]. Ale pozor, teď jsme odečetli jednou A+B a&nbsp;jednou A+C, tedy část&nbsp;A (prefixový součet končící na pozici [x,y]) jsme odečetli dvakrát, musíme ji proto ještě jednou přičíst.</p><p>Celý vzorec tedy vypadá takto:</p><p>soucet = P[X,Y] - P[X,y] - P[x,Y] + P[x,y];</p><p>Tento princip přičítání a odečítání se dá zobecnit i&nbsp;pro libovolné vyšší rozměry, ale chce to již trošku představivosti, co se má přičíst a&nbsp;kolikrát. Říká se tomu také <i>princip inkluze a&nbsp;exkluze</i> a&nbsp;najde použití nejen u&nbsp;vícerozměrných prefixových součtů.</p>",
            "position": [
                -605.0212059020996,
                984.6594848632812
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-reprezentace-dat",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "26-Z2-2"
            ],
            "title": "Reprezentace dat",
            "htmlContent": "<h3>Reprezentace dat v&nbsp;počítači</h3><p>Celkem často si v&nbsp;průběhu výpočtu našeho algoritmu potřebujeme pamatovat nějaké hodnoty. K&nbsp;tomu nám programovací jazyky dávají nástroj s&nbsp;názvem <i>proměnná</i>. Ta představuje jakési pojmenované místo v&nbsp;paměti (přihrádku), do kterého si můžeme data ukládat a&nbsp;pak je odtud zase načítat.</p><p>Typickým příkladem může být počítání součtu čísel, která nám uživatel zadá na vstupu. Na začátku nejdříve do nějakého místa v&nbsp;paměti uložíme hodnotu&nbsp;0. Poté postupně, jak nám uživatel zadává čísla, tuto proměnnou pokaždé přečteme, k&nbsp;její hodnotě přičteme nově zadané číslo a&nbsp;výsledek opět uložíme na stejné místo.</p><p>Takovéto použití jedné proměnné je velmi jednoduché (tak jednoduché, že ho takto podrobně do řešení KSPčka nepište, není to potřeba), ale také celkem omezené. Co kdybychom si chtěli pamatovat třeba celou zadanou posloupnost čísel? Mohlo by nám stačit vyrobit si spoustu různě pojmenovaných proměnných, ale nejde to lépe? Jde.</p><p>Jednotlivé proměnné se mohou kombinovat do složitějších konstrukcí, které obecně nazýváme <i>datovými strukturami</i>. Zkusíme si ty nejzákladnější představit.</p>",
            "position": [
                -1013.3298988342285,
                429.08892822265625
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-spojovy-seznam",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-pole"
            ],
            "title": "Spojový seznam",
            "htmlContent": "<h4>Spojový seznam a&nbsp;ukazatele</h4><p>Pole jsme měli v&nbsp;paměti určené jenom tím, že počítač věděl, kde je jeho začátek a&nbsp;kolik místa v&nbsp;paměti zabírají jeho prvky. Při dotazování na konkrétní index pak podle indexu a&nbsp;podle velikosti prvků počítač přesně věděl, kam do paměti se má podívat, aby našel námi požadovaný prvek (to vše zvládl v&nbsp;konstantním čase). Jednotlivé prvky si tedy vůbec nemusely pamatovat, kde se nachází jejich sousedi, protože všechny prvky seděly v&nbsp;paměti za sebou.</p><p>Představme si ale teď situaci, kdy by si každý prvek ještě pamatoval pozice sousedů. Pak bychom mohli mít prvky libovolně rozházené v&nbsp;paměti a&nbsp;jen by se na sebe vzájemně odkazovaly (první prvek by tvrdil, že druhý je na pozici X, druhý by tvrdil, že třetí je na pozici Y, a&nbsp;tak dále).</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-1.png\" alt=\"Spojový seznam\"></figure><p>K&nbsp;lepšímu pochopení tohoto principu je důležité si vysvětlit, co to je <i>ukazatel</i> (nebo také <i>odkaz</i> či anglicky <i>pointer</i>). Každé místo v paměti počítače má své číselné označení, kterému říkáme <i>adresa</i>. Když si vytváříme nějakou pojmenovanou proměnnou, ta se vlastně odkazuje na určité místo v&nbsp;paměti a&nbsp;na tomto místě v&nbsp;paměti je její hodnota.</p><p>Co kdyby ale hodnota proměnné byla adresa nějakého jiného místa v&nbsp;paměti? Pak takové proměnné říkáme <i>pointer</i> a&nbsp;umožňuje nám vytvářet výše popsanou strukturu rozházených prvků v&nbsp;paměti.</p><p><i>Spojový seznam</i> je tedy určený svým prvním prvkem (máme v&nbsp;jedné proměnné pointer na tento prvek, který se často nazývá <i>kořen</i>, protože z&nbsp;něj „vyrůstá“ zbytek struktury) a&nbsp;poté u&nbsp;každého dalšího prvku máme za sebou uloženou hodnotu tohoto prvku a&nbsp;odkaz (pointer) na další prvek. Odkazy mezi prvky mohou být i&nbsp;obousměrné, mohou vést dokola (poslední ukazuje na první) či mohou dokonce tvořit nějakou složitější strukturu (pak to ale již nebude čistý spojový seznam).</p><p>Pokud pointer nemá nikam ukazovat, realizuje se to odkázáním tohoto pointeru na adresu NULL. To skoro doslovně říká „Neukazuji nikam“.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-2.png\" alt=\"Obousměrný cyklický spojový seznam\"></figure><p>Co nám takto vystavěná struktura umožňuje v&nbsp;porovnání s&nbsp;polem? Přístup na konkrétní prvek v&nbsp;ní stojí lineárně času, protože ho musíme „odkrokovat“ od prvního prvku (na který máme pointer), tedy musíme udělat až O(N) kroků. Pokud bychom však pointer na daný prvek už nějak měli, samozřejmě na něj můžeme přistoupit v&nbsp;konstantním čase.</p><p>Naopak přidávání prvků na konkrétní místo (i&nbsp;jejich odebírání) máme v&nbsp;podstatě zadarmo a&nbsp;spojový seznam můžeme rozšiřovat, dokud na něj máme v&nbsp;počítači paměť. Ve chvíli, kdy chceme přidat nový prvek za prvek, na který máme pointer, jen šikovně přepojíme ukazatele. Pokud předtím ukazatele vedly A→B, teď povedou A →C →B (a&nbsp;při odebírání naopak).</p>",
            "position": [
                -1226.3777618408203,
                808.8343238830566
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kucharka-zakladni-stromy",
            "type": "text",
            "comment": "https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/",
            "requires": [
                "kucharka-zakladni-grafy"
            ],
            "title": "Stromy",
            "htmlContent": "<h4>Stromy</h4><p>Možná si říkáte, co má informatika u&nbsp;všech elektronů společného s&nbsp;lesnictvím? Kupodivu celkem mnoho a&nbsp;bez stromů bychom se v&nbsp;leckterém případě jen těžko obešli. Informatické stromy sice nejsou většinou tak zelené, mají ale, na rozdíl od svých dřevnatých sourozenců, mnoho jiných pěkných vlastností.</p><p>Strom je vlastně speciálním případem souvislého grafu, který neobsahuje žádnou kružnici (cyklus). To znamená, že mezi každými dvěma vrcholy stromu existuje právě jedna cesta.</p><p>Díky této vlastnosti můžeme nějaký zvolený vrchol prohlásit za <i>kořen</i> a&nbsp;strom za něj pomyslně zavěsit (tak, že strom roste od kořene směrem dolů), této operaci se říká <i>zakořenění</i>. Pak můžeme mluvit o&nbsp;tom, že z&nbsp;kořene směrem dolů (informatické stromy mají tradičně kořen nahoře) vyrůstají nějaké <i>podstromy</i>.</p><figure class=\"image\"><img src=\"https://ksp.mff.cuni.cz/kucharky/zakladni-algoritmy/zakladni_algoritmy-4.png\" alt=\"Strom\"></figure><p>Pokud je strom zakořeněný, můžeme v&nbsp;něm mluvit o&nbsp;<i>hloubce</i> každého vrcholu, neboli o&nbsp;jeho vzdálenosti od kořene. Hloubka celého stromu je pak nejdelší ze vzdáleností od kořene k&nbsp;nějakému z&nbsp;<i>listů</i> (tak říkáme vrcholům, které již nemají žádné <i>syny</i>, tedy vrcholy, které by z&nbsp;nich vyrůstaly). Podle hloubky poté můžeme vrcholy stromu uspořádat do jednotlivých <i>hladin</i>.</p><p>Velmi často používáme stromy, které jsou nějak pravidelné. Příkladem jsou třeba <i>binární stromy</i>, které mají v&nbsp;každém vrcholu maximálně dva syny (říkáme jim <i>levý a&nbsp;pravý podstrom</i>). Reprezentovat se dají buď obecně jako každý jiný strom (v&nbsp;každém vrcholu spojový seznam podstromů), nebo velmi pěkně i&nbsp;v&nbsp;poli.</p><p>Stačí si pomyslně doplnit binární strom na <i>úplný</i> (to je takový, který má všechny své hladiny plné) a pak ho od kořene směrem dolů po hladinách očíslovat (kořen dostane číslo nula, jeho synové čísla jedna a dva, další hladina čísla tři až šest, atd.).</p><p>Můžeme si všimnout, že pokud si v&nbsp;takovém očíslování vezmeme jakýkoliv vrchol s&nbsp;číslem (indexem) i, jeho synové jsou právě vrcholy s&nbsp;indexy 2i+1 a&nbsp;2i+2. Do pole níže je zapsaný binární strom z&nbsp;obrázku výše.</p><figure class=\"table\"><table><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>hodnota</td><td>8</td><td>3</td><td>12</td><td>1</td><td>5</td><td>9</td><td>14</td><td>-</td><td>-</td><td>4</td><td>7</td></tr></tbody></table></figure><p>Jak plyne z&nbsp;očíslování, pro úplný binární strom je uložení v&nbsp;poli efektivní a neplýtváme místem. Pokud ale strom úplný nebude, zůstanou nám v&nbsp;poli volná místa. Uložení v&nbsp;poli se tedy vyplatí jen pro stromy, které se od úplných příliš neliší.</p><p>Speciálním případem binárních stromů jsou pak ještě <i>binární vyhledávací stromy</i>. Jsou to normální binární stromy, pro něž navíc platí, že ať si vezmeme libovolný vrchol, budou hodnoty vrcholů v&nbsp;jeho levém podstromu menší než hodnota tohoto vrcholu a&nbsp;hodnoty v&nbsp;jeho pravém podstromu naopak větší.</p><p>V&nbsp;takovém stromu pak zvládneme snadno vyhledávat. Budeme ho postupně procházet od kořene a v&nbsp;jednotlivých vrcholech budeme porovnávat hledanou a aktuální hodnotu a podle toho sestupovat do správného podstromu. Podobná technika je detailněji popsaná ve druhé části kuchařky, v&nbsp;sekci <i>Rozděl a panuj</i>.</p><p>Na složitější datové struktury stavějící na těchto základních (haldy, intervalové stromy,&nbsp;…) se můžete podívat do některé z&nbsp;našich dalších kuchařek, na jejichž přehled jsme vás už odkázali o&nbsp;kapitolu výše.</p>",
            "position": [
                -1597.0549392700195,
                1269.551181793213
            ],
            "originalSource": {
                "url": "/kucharky/zakladni-algoritmy/",
                "name": "Základní algoritmické kuchařky"
            }
        },
        {
            "id": "kurz-necisla",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "ulohy-v-kurzu"
            ],
            "title": "Nečísla",
            "htmlAssignment": "<p>Vstupem bude číslo <i>N</i>, výstupem bude <i>N</i>-té nečíslo.</p><p>Jak vypadá nečíslo? Nejprve je nutno definovat <i>x</i>-čísla. Pro <i>x = 1</i> jde o klasická prvočísla. Tedy posloupnost 1-čísel je <code>2,3,5,7,11,13,17,19,…</code>.&nbsp;</p><p>Posloupnost <i>(x+1)</i>-čísel získáme tak, že pro každé <i>x</i>-číslo postupně najdeme <i>(x+1)</i>-té nejbližší volné číslo za ním.</p><p>Posloupnost 2-čísel, neboli druhočísel, je tedy <code>6,8,10,12,15,16,20,22,25,32,34,39,44,…</code>; posloupnost 3-čísel, neboli třetičísel, je <code>18,21,26,27,30,33,35,36,40,45,…</code>; první čtvrtočíslo je <code>42</code>, a tak dále.</p><p>Tahle metoda některá nezáporná čísla vynechává, a to přesně jsou nečísla. Posloupnost nečísel začíná <code>0,1,4,9,14,24,28,38,…</code>. Nečísla indexujeme od nuly, tedy nulté nečíslo je nula, čtvrté nečíslo je 14…</p><p>Možná lépe pochopitelnou definici nečísel naleznete na <a href=\"http://necyklopedie.org/wiki/Nečíslo\">Necyklopedii</a>.</p><p>Vzorový vstup:\n</p><pre>6\n</pre><p>Příslušný výstup:\n</p><pre>28\n</pre>",
            "points": 10,
            "taskReference": "kurz-necisla",
            "position": [
                521.1385955810547,
                346.8461765050888
            ]
        },
        {
            "id": "label_matematicke",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Potřeba matematického pohledu",
            "position": [
                1845.8490009307861,
                -283.6708881855011
            ],
            "hidden": true
        },
        {
            "id": "label-1d-pole",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Pole",
            "rotationAngle": 0,
            "position": [
                -945.9529113769531,
                630.3731384277344
            ]
        },
        {
            "id": "label-2d-pole",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "2D pole",
            "rotationAngle": 340,
            "position": [
                -1940.40087890625,
                -968.7437057495117
            ],
            "hidden": true
        },
        {
            "id": "label-aktualni-ulohy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Úlohy z aktuálních sérií →",
            "position": [
                234.45677757263184,
                152.78860139846802
            ],
            "rotationAngle": 358
        },
        {
            "id": "label-grafy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Grafy",
            "rotationAngle": 342,
            "position": [
                -1649.10693359375,
                1538.0559949874878
            ],
            "hidden": false
        },
        {
            "id": "label-grafy-pracovni-poznamka",
            "type": "text",
            "comment": "Chtělo by to grafy celé nějak přeuspořádat. Je to přeci jen dost široké téma.",
            "requires": [
                "31-Z3-3"
            ],
            "title": "Grafy, ale neuspořádané",
            "htmlContent": "<p>undefined</p>",
            "position": [
                -1596.2439575195312,
                1663.685890197754
            ],
            "hidden": true
        },
        {
            "id": "label-hard",
            "type": "label",
            "comment": "...",
            "requires": [],
            "position": [
                216.00632858276367,
                262.37095308303833
            ],
            "title": "Džungle těžkých úloh →",
            "rotationAngle": 14
        },
        {
            "id": "label-kucharky",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "← Teoretická informatika prakticky",
            "position": [
                -268.6325788497925,
                208.12596106529236
            ]
        },
        {
            "id": "label-programovani",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Kurz programování →",
            "position": [
                21.740379333496094,
                377.9481301307678
            ],
            "rotationAngle": 89
        },
        {
            "id": "label-retezce",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Textové řetězce",
            "rotationAngle": 326,
            "position": [
                -1015.8722686767578,
                1259.4331970214844
            ],
            "hidden": false
        },
        {
            "id": "label-trizeni",
            "type": "label",
            "comment": "",
            "requires": [],
            "title": "Třídění",
            "position": [
                -2183.748046875,
                -446.9033250808716
            ],
            "hidden": true
        },
        {
            "id": "label-uvod",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Úvod",
            "position": [
                -3.4084014892578125,
                37.09214782714844
            ]
        },
        {
            "id": "label-vaskuv-pokus-o-kecy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Vaškův pokus o kecy",
            "position": [
                -695.6980514526367,
                -966.9375038146973
            ],
            "hidden": true
        },
        {
            "id": "label-zelvy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Želvy",
            "rotationAngle": 43,
            "position": [
                751.9852294921875,
                -570.5177917480469
            ],
            "hidden": true
        },
        {
            "id": "lbl-pokrocile-grafy",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Pokročilejší grafy",
            "position": [
                -1592.4177017211914,
                2026.9631385803223
            ],
            "hidden": false
        },
        {
            "id": "meta-poznamky",
            "type": "label",
            "comment": "...",
            "requires": [],
            "title": "Meta-poznámky",
            "position": [
                -18,
                -159
            ]
        },
        {
            "id": "placeholder-kurz-programovani",
            "type": "text",
            "comment": "",
            "requires": [
                "programovani"
            ],
            "title": "Základní kurz programování v Pythonu",
            "htmlContent": "<p>Pokud jste ještě nikdy nenapsali ani řádek kódu, pokračujte základním kurzem programování. Po několika lekcích se naučíte psát programy v jazyce Python, který je jednoduchý a stravitelný pro začátečníky, ale vhodný i pro složité a mocné úkoly. Budete znát dostatek informací pro to, abyste pochopili vzorová řešení našich <a href=\"https://ksp.mff.cuni.cz/tasks\">úloh</a>, která jsou často psaná právě v Pythonu.</p><p>Naproti tomu, pokud máte zájem o popis základních algoritmů, pak vám tato sekce příliš nepomůže, namísto toho vás odkážeme do naší <a href=\"https://ksp.mff.cuni.cz/encyklopedie\">programátorské encyklopedie</a>. Úplní nováčci ve světě informatiky by měli zamířit do <a href=\"https://ksp.mff.cuni.cz/viz/kucharky/zakladni-algoritmy\">kuchařky pro začátečníky</a>. Ti ostatní mohou z dalších textů načerpat nové vědomosti, jež se jim budou hodit jak v KSP a podobných soutěžích, tak při \"obyčejném\" psaní programů pro vlastní potřebu.</p><p>Pokročilejším řešitelům spíše doporučujeme se podívat na ostatní úlohy.</p>",
            "position": [
                13.71942138671875,
                652.3672561645508
            ]
        },
        {
            "id": "programovani",
            "type": "text",
            "comment": "...",
            "requires": [
                "ulohy-v-kurzu"
            ],
            "title": "Programování",
            "htmlContent": "<p>Počítače nemluví lidskou řečí. Aspoň zatím. Pokud jim chceme vysvětlit nějaký komplikovanější problém, potřebujeme mluvit správnou řečí - nějakým <strong>programovacím jazykem.</strong></p><h2>Jaký programovací jazyk použít?</h2><p>Programovacích jazyků je více a každý se hodí na něco jiného. S roustoucími zkušenostmi se pravděpodobně naučíš přecházet mezi několika programovacími jazyky podle toho, jaký problém zrovna řešíš.</p><p>Pro řešení úloh Ti doporučujeme <strong>Python 3</strong>. Pokud se ho chceš naučit, můžeš zkusit projít kurzem, který jsme pro Tebe připravili.</p>",
            "position": [
                3.194398880004883,
                594.2665047645569
            ]
        },
        {
            "id": "start",
            "type": "text",
            "requires": [
                "label-uvod"
            ],
            "comment": "úvodní kecy o tom, jak to celé funguje",
            "title": "Start",
            "htmlContent": "<p>Aktuálně je celý projekt <strong>ve vývoji</strong>. Pomoci s tím můžeš i ty! Více informací najdeš v úloze <a href=\"#task/jak-muzu-pomoct\">Chtěl(a) bych na kurzu něco změnit</a>.</p><hr><h2>Vítej v novém KSPím kurzu!</h2><p>Chceš se naučit programovat, ale nevíš, na čem si to můžeš zkoušet? Nebo již něco umíš a chceš si své znalosti rozšířit? Potom jsi na správném místě! V našem kurzu najdeš prakticky vše, čemu jsme se kdy v KSPčku věnovali.</p><h3>Co zde (časem) najdeš?</h3><ul><li>Základní kurz programování (dříve byl samostatně)</li><li>Roztříděné úlohy ze starších ročníků a sérií</li><li>Staré seriály</li><li>…a další úlohy, které jsme odněkud vyhrabali nebo nově vyrobili</li></ul><h3>Jak kurz funguje?</h3><p>Když zavřeš tento text, najdeš na stránce spoustu úloh umístěných do <a href=\"#task/kucharka-zakladni-grafy\">grafu</a>. Po přihlášení se ti i začnou vybarvovat podle toho, jestli už jsi na nich někdy dělal(a). Kurz totiž staví nad <a href=\"/cviciste/\">Cvičištěm</a> - místem, kde můžeš řešit naše staré úlohy. Všechny úlohy vyřešené zde v kurzu se ti označí jako vyřešené ve Cvičišti. Stejně tak naopak.</p><p>Úlohy jsou do grafu naskládané podle toho, jak moc spolu tematicky souvisí. Navíc v grafu najdeš i různé texty, některé nové a některé z různých částí našeho webu. Toto uspořádání Ti umožňuje spojit studium různých témat s relevantními úlohami, na kterých si hned můžeš své znalosti procvičit.</p><h3>Co budu mít z toho, že budu úlohy zde řešit?</h3><p>Můžeš se něco nového naučit a mít z toho dobrý pocit. 😀 Nic jiného Ti slíbit nemůžeme. Navíc ono jsou k úlohám většinou přístupná vzorová řešení, takže soutěžit zde nedává moc smysl.</p><p>Ohledně vzorových řešení – je čistě na Tobě, zda budeš úlohy řešit poctivě, nebo jestli si budeš číst řešení před tím, než vymyslíš něco vlastního. Zabránit Ti v tom nedokážeme a ani nechceme. Pokud se chceš něco naučit, nebo si něco procvičit, tak doporučujeme vzorová řešení otevírat až po vlastním řešení, případně když se zasekneš. Získáš tak z kurzu nejvíce.</p>",
            "position": [
                -1.7545125484466553,
                96.57219696044922
            ]
        },
        {
            "id": "text-soutezni-ulohy",
            "type": "text",
            "comment": "...",
            "requires": [
                "ulohy-v-kurzu"
            ],
            "title": "Aktuální soutěžní úlohy",
            "htmlContent": "<p>Níže se objevují aktuální úlohy z obou kategorií, které v KSPčku máme. Vzhledem k soutěžnímu charakteru u úloh nenajdeš řešení, to vydáváme až později. Odevzdáním úlohy zde v kurzu úlohu odevzdáváš naprosto stejně, jako by jsi to dělal(a) z běžného webového rozhraní.</p><p>&nbsp;</p><p><strong>Poznámka</strong> - aktuálně se odevzdávání úloh trošku rozbíjí a může na Tebe vyskočit komplikovaná chybová hláška vysvětlující, co máš udělat.</p>",
            "position": [
                1051.7585105895996,
                195.5978307723999
            ]
        },
        {
            "id": "ulohy-v-kurzu",
            "type": "text",
            "requires": [
                "start"
            ],
            "comment": "kecy o tom, jak se může řešit taková úloha",
            "title": "Úlohy v kurzu",
            "htmlContent": "<h2>Úlohy zde v kurzu</h2><h3>Texty (obdélníky)</h3><p>V obdélnících najdeš povídání všeho druhu. Ať už technické poznámky jako je tento text, nebo vytažené relevantní části <a href=\"/kucharky/\">kuchařek</a> a podobných vysvětlujících textů. Pokud je nechceš číst a chceš se věnovat pouze úlohám, je to samozřejmě možné. Slibujeme, že v zadání je napsané vše potřebné pro úspěšné vyřešení úlohy. V připojených textech najdeš akorát obecné postupy, které se Ti mohou hodit.</p><h3>Open-datovky (elipsy)</h3><p>Open-datovky jsou praktické úlohy, které řešíš psaním programů. Pokud si se s nimi v rámci KSPčka zatím nikdy nesetkal(a), doporučujeme nahlédnout <a href=\"/h/pravidla/\">např. do pravidel KSP-H</a>. Najdeš tam vše podstatné popsané.</p><p>V tomto kurzu mají open-datovky vždy podobu vyplněné elipsy a vybarvují se podle toho, kolik máš z úlohy bodů. Vstupy a výstupy je možné generovat a odevzdávat přímo na stránce pod zadáním, není potřeba chodit kamkoliv jinam.</p>",
            "position": [
                -2.4084014892578125,
                180.22608184814453
            ]
        },
        {
            "id": "zkp-1-uvod-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-1-uvod-text"
            ],
            "title": "Hello KSP",
            "htmlAssignment": "<p>Jako vstup posíláme program v Pythonu, který spustíte a jeho výstup pošlete zpátky. Stažený soubor můžete libovolně přejmenovat, na jeho názvu nezáleží. Například kdyby vám vadilo, že má pochybnou příponu <code>.in</code>, tak ji změňte na <code>.py</code>…\n\n</p><p>Kdyby se vám zavíralo okno před tím, než stihnete přečíst výstup, tak si jej pusťte v terminálu (na Windows XP a výš <code>cmd</code>, na Linuxu třeba <code>konsole</code>, <code>xterm</code>, <code>rxvt</code>, …) – jednoduše tak, že terminálu zadáte <code>python hello.py</code>, kde <tt>hello.py</tt> je jméno vstupního souboru.\n\n</p><p>Kdyby se příkazový řádek Windows tvářil, že nezná Python, je potřeba cestu k němu přidat do <code>PATH</code>; v případě problémů (třeba nevíte, co vám tato věta radí) nám napište. Stručný postup je „Tento počítač → Vlastnosti → Upřesnit → Proměnné prostředí → v poli Systémové proměnné řádek Path → Upravit → přidat <code>C:\\Python34</code> → Ok, Ok, Ok“. Na různých verzích Windows a s různou verzí Pythonu se může postup v detailech lišit.\n\n</p><p>Účelem této úlohy je přesvědčit se, zda máte všechny potřebné nástroje a znalosti pro odevzdávání dalších úloh. V případě, že by vám něco nefungovalo, rádi se pokusíme poradit - můžeš nám napsat na <a href='mailto:zdrojaky@ksp.mff.cuni.cz'>email</a> nebo <a href='https://discord.gg/AvXdx2X'>Discord</a></p>",
            "points": 2,
            "taskReference": "zkp-1-uvod",
            "position": [
                268.1538848876953,
                768.9769115447998
            ]
        },
        {
            "id": "zkp-1-uvod-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "placeholder-kurz-programovani"
            ],
            "position": [
                75.65980339050293,
                719.5808401107788
            ],
            "title": "První krůčky",
            "htmlContent": "<p>Vítejte v úvodním kurzu programování. Jeho účelem je provést vás úplnými\nzáklady programování. Po jeho absolvování byste měli být schopni s trochou\nsnahy pochopit autorská řešení úloh nebo kuchařky KSP, případně sami vyřešit\njednodušší úlohy.\n\n</p><p>Pokud tedy víte, co je to podmínka, cyklus, funkce, třídění bublinkami nebo\nrekurze, pak vám tento kurz asi nepomůže.\n\n</p><p>Pokud vám bude cokoli nejasného, budete se chtít na něco zeptat, napište nám na <a href='zdrojaky@ksp.mff.cuni.cz'>email</a> nebo na <a href='https://discord.gg/AvXdx2X'>Discord</a>, kde vám jistě někdo zkušenější rád\nporadí.\n\n</p><p>Poznámka na okraj: Může se vám to zdát jakkoli ošklivé, ale programátorskou\nlatinou je angličtina. S její znalostí se vám bude programovat o něco\njednodušeji a hlavně – v angličtině existuje drtivá většina dokumentace,\nmanuálů, návodů, odborné literatury, ale často i chybové hlášky programů jsou\njen anglicky – prostě to nikdo nepřeložil.\n\n</p><p>Na naše programátorské hrátky si musíme pořídit nějaké\nprostředí, ve kterém se jim budeme věnovat (ano, počítač je vhodný, i když\nděrovačka na <a href=\"http://cs.wikipedia.org/wiki/Děrný_štítek\">děrné\nštítky</a> by také byla zajímavá, nicméně o tom třeba někdy příště). Teď vážně\n— potřebujeme nějaký editor, ve kterém budeme psát <i>zdrojový kód</i>, a\nprogram, který nám umožní onen zdrojový kód spustit.\n\n</p><p>My se budeme učit programovat v Pythonu 3.x. Uživatelé Windows si stáhnou vhodný\nbalík ze stránek <a href=\"http://www.python.org\">http://www.python.org</a>, uživatelé Linuxu by měli Python najít\nve svém balíčkovacím systému, v drtivé většině ho pravděpodobně budou mít už\ndávno nainstalovaný, jen o tom nevědí. <strong>Dejte si ale pozor, abyste měli\nnejnovější verzi Pythonu 3.x, ne Pythonu 2.x.</strong>\n\n</p><p>Také je vhodné mít nějaký <i>textový editor</i>. Na Linuxu můžete použít\ntřeba Kate, KWrite, GEdit; později se můžete pokusit proniknout do tajů mocných\neditorů jako Vim nebo Emacs. S Windows je standardně dodáván Notepad\n(Poznámkový blok); pokud chcete něco lepšího, rozumný je třeba PSPad. Nebo si\nmůžete zkusit nainstalovat nějaké IDE — vyberte si:\n<a href=\"http://wiki.python.org/moin/IntegratedDevelopmentEnvironments\">http://wiki.python.org/moin/IntegratedDevelopmentEnvironments</a>\n\n</p><p>Otevřete si něco, do čeho můžete zadat příkaz. U Windows vám na to poslouží\nklávesová zkratka Win+R, u Linuxu si pusťte terminál – může se jmenovat\ntřeba Konsole, Terminal, XTerm, RXVT ….  Vložte\n<code>python</code> a Enter (myšofilové mohou kliknout na OK, pokud tam takové\ntlačítko mají). Otevře se vám černá obrazovka, na které bude napsáno zhruba\ntoto:\n\n</p><pre>Python 3.4.0 (default, Jun 19 2015, 14:20:21) \n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</pre>\n\nJeště jednou si zkontrolujte, zda je verze Pythonu, kterou jste právě spustili (na\nprvním řádku), správná: zvláště na UNIXech by se mohla spustit verze 2. V takovém\npřípadě program ukončete a zkuste to znovu, jen tentokrát zadejte <code>python3</code>.\n\n<p>Za trojšipkou na posledním řádku bude blikat kurzor. Vítejte v interaktivním módu\nPythonu.\nTen se dá používat třeba jako kalkulačka. Zadáme-li <code>1+1</code>, vypadne\n<code>2</code>. Chceme-li dělat něco složitějšího, můžeme si vyvolat výsledek\npředchozího výrazu znakem <code>_</code>. Malý příklad:\n\n</p><pre>&gt;&gt;&gt; 1+2\n3\n&gt;&gt;&gt; _*(_+1)\n12\n&gt;&gt;&gt; _**3\n1728\n&gt;&gt;&gt; (1800-_) // 2\n36\n&gt;&gt;&gt; _ // 7\n5\n&gt;&gt;&gt; _%2\n1 </pre>\n\n<p>Jak jste jistě pochopili, Python podporuje standardně <i>operátory</i>\n<code>+</code>, <code>-</code>, <code>*</code>, <code>//</code>, modulo\n<code>%</code> a operátor umocňování <code>**</code>. Dělení pomocí operátoru\n<code>//</code> je celočíselné, pokud potřebujete desetinné číslo, použijete\npodobný operátor <code>/</code>\n\n</p><pre>&gt;&gt;&gt; 13//7\n1\n&gt;&gt;&gt; 13/7\n1.8571428571428572\n&gt;&gt;&gt; 13.4/7\n1.9142857142857144\n&gt;&gt;&gt; 13.4//7\n1.0</pre>\n\n<p>Celočíselně dělit tedy můžete i desetinná čísla, výsledek bude zaokrouhlený na \nnejbližší celé číslo. \n\n</p><p>V ostatních případech Python počítá v celých číslech, dokud může. Jakmile je však\njakýkoli z operandů neceločíselný, převede se všechno na desetinná čísla. Tedy\ndokud jsou oba operandy celé číslo, je i výsledek celé číslo. Tohle pravidlo má\njednu výjimku u umocňování, zkuste přijít na to, jakou.\n\n</p><p>Počítání v celých číslech v Pythonu má zajímavou vlastnost — Python umí\npočítat s libovolně velkými celými čísly (ovšem adekvátně pomalu — má-li číslo\nmilion cifer a chceme jej vypsat na obrazovku, jedná se o megabajt dat, což už\nnějaký ten čas zabere):\n\n</p><pre>&gt;&gt;&gt; 2**2\n4\n&gt;&gt;&gt; 2**2**2\n16\n&gt;&gt;&gt; 2**2**2**2\n65536 </pre>\n\n<p><code> 2**2**2**2**2</code> popíše celou obrazovku čísly \na <code>&gt;&gt;&gt;\n2**2**2**2**2**2</code> se bude počítat brutálně dlouho, neboť se mocnina\nzávorkuje zprava — jako byste napsali <code>\n2**(2**(2**(2**(2**2))))</code>.\n\n</p><p>Naproti tomu v desetinných číslech má Python omezení na velikost:</p>\n\n<pre>&gt;&gt;&gt; 2.0**2**2**2\n65536.0\n&gt;&gt;&gt; 2.0**2**2**2**2\nTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nOverflowError: (34, 'Numerical result out of range') </pre>\n\n<p>Každý příkaz, který zadáváme, musí být buď na vlastním řádku, nebo \noddělený od sousedních příkazů středníkem. Výsledek je ale stejný:\n\n</p><pre>&gt;&gt;&gt; 2**2\n4\n&gt;&gt;&gt; 3**3\n27\n\n&gt;&gt;&gt; 2**2; 3**3\n4\n27 </pre>\n\n<p>Počítáme-li něco složitějšího, budeme si potřebovat někam uložit výsledky.\nK tomu slouží <i>proměnné</i>. Ty si můžeme představit jako paměť u kalkulačky,\naž na to, že si je můžeme pojmenovat (skoro) jakkoli. Dobrým zvykem je nazvat\nsi proměnnou podle toho, co do ní skutečně ukládáme. Už od nějakých pěti\nproměnných výš ztrácí průměrný programátor přehled, co že se to vlastně ukládá\ndo proměnné s názvem <code>zeleny_pruh</code> a co do proměnné\n<code>barrandovsky_most</code>. Odstrašujícím příkladem jsou pak obvykle\nproměnné nazvané <code>tmp1c</code> apod.\n\n</p><p>K pojmenovávání proměnných používejte malá a velká písmena anglické abecedy,\nčíslice a podtržítko <code>_</code>, přičemž název nesmí začínat číslicí. Dejte\nsi pozor na to, že <code>Bagr</code>, <code>BAGR</code>, <code>bagr</code> a\n<code>b46r</code> jsou čtyři různé názvy.  Když do proměnné chcete uložit\nnejvětší společný dělitel, pak je vhodné ji nazvat např.\n<code>nejvetsi_spolecny_delitel</code> nebo\n<code>NejvetsiSpolecnyDelitel</code>. Potom byste ale jiný víceslovný název\nměli mít ve stejném formátu — mít v jednom programu proměnnou pojmenovanou\n<code>ZlutyBagr</code> a zároveň jinou <code>modry_kombajn</code> je cesta do\npekel, kdy jednou prostě formát spletete a chyba je na světě. Berte to jako\ndobře míněné rady zkušených programátorů, nikdo vás do toho samozřejmě nenutí.\n\n</p><pre>&gt;&gt;&gt; x = 13; y = 11; z = x+y; z + 1\n25 </pre>\n\n<p>Co říká příklad? Do proměnné <code>x</code> jsme vložili 13, do proměnné\n<code>y</code> jsme vložili 11, do proměnné <code>z</code> jejich součet a pak\njsme vypsali číslo o jedna větší. To, že se vkládá (<i>přiřazuje</i>) do\nproměnné pomocí znaku <code>=</code>, neříká nic o rovnosti, klidně můžeme\nnapsat následující:\n\n</p><pre>&gt;&gt;&gt; x = 20; y = 19; x = x + y*2; x\n58 </pre>\n\n<p>Příkaz na třetím řádku prostě přepíše to, co bylo v proměnné <code>x</code>\npůvodně, a vloží tam novou hodnotu.\n\n</p><p>Abychom pořád nemuseli zadávat příkazy do terminálu — uznejme, že je to\ntrochu nepraktické — je možné si je uložit do souboru. Tomuto souboru dáme\npříponu <code>.py</code>, takže náš první program bude třeba\n<code>ahoj.py</code>.\n\n</p><p>Proč bychom si vlastně měli příkazy uložit? Náš program budeme chtít třeba\nspouštět vícekrát. Každý program, který spouštíte, je vlastně takováhle\nuložená posloupnost různých příkazů pro chytrou kalkulačku.\n\n</p><p>Otevřete si tedy textový editor (psali jsme o něm na začátku) a zapište do\nněj příkazy tak, jako byste je zadali do toho terminálu:\n\n</p><pre>x = 20\ny = 19\nx + y*2\n_**2\n</pre>\n\n<p>Pak si ho uložte na\nnějaké vhodné místo, kde ho dokážete najít. Pokud máte Windows, pohlídejte si,\naby měl příponu <code>.py</code> (někdy se systém snaží schovat před vámi\npřípony souborů; ten váš by měl mít jinou ikonu než textový dokument).\n\n</p><p>Program spustíme ve Windows tím, že na něj poklepeme; v Linuxu obvykle\nz terminálu příkazem <code>python &lt;jméno souboru&gt;</code>.\nI ve Windows je rozumnější spouštět jej z terminálu, zvláště pokud si\nchcete přečíst, co váš program vypisuje.\n<small>Nepočítejte s tím, že se tady naučíte, jak vyrábět\núžasná okýnka s klikacím menu, natož jak si napsat graficky propracovaný\nTetris, o střílečce nemluvě. To je daleko obtížnější a přesahuje náplň\nzákladního kurzu programování.</small>\n\n</p><p>Tedy, pokud jsme si program uložili do <code>C:\\Users\\Já\\Dokumenty\\ahoj.py</code>,\ntak jej spustíme příkazem <code>python C:\\Users\\Já\\Dokumenty\\ahoj.py</code>.\nUživatelé Linuxu budou mít třeba cestu <code>/home/karel/ahoj.py</code>, tak spustí <code>python /home/karel/ahoj.py</code>.\n\n</p><p>Ha, máme problém. Očekávali bychom, že náš program vypíše <code>58</code>\na pak <code>3364</code>, ale ejhle, zrada. Máme několikařádkovou chybovou hlášku, která\nnejprve sděluje, kde přesně došlo k chybě (na řádku 4), a pak sděluje konkrétní chybu.\n\n</p><pre>NameError: name '_' is not defined</pre>\n\n<p>V souboru nefunguje podtržítkový trik. To nás naštěstí nezabije, pořídíme si\no proměnnou víc a přiřadíme do ní potřebnou hodnotu.\n\n</p><pre>x = 20\ny = 19\nz = x + y*2\nz**2\n</pre>\n\n<p>Čekali byste, že teď to vypíše <code>3364</code>? Nevypíše! Python totiž\nnevypisuje hodnotu výrazu, když spouštíme nějaký soubor, místo toho si o to\nmusíme explicitně říct voláním <code>print</code>.\n\n</p><pre>x = 20\ny = 19\nz = x + y*2\nprint(z)\nprint(z**2)\n</pre>\n\n<p>Nyní se konečně dočkáme očekávaného výpisu:\n\n</p><pre>58\n3364\n</pre>\n\n<p>Proces, kterým jsme nyní prošli, se nazývá ladění, a slouží k přeměně\nnefunkčního programu na funkční. Obvykle při něm odstraňujete chyby, které jste\npředtím napáchali. Nebojte se psát s chybami. Každý programátor píše chybné programy\na pak je musí opravovat. Proto se také velmi hodí mít program uložený v souboru,\njinak byste ho museli přepisovat pořád dokola.\n\n</p><p>Nemusíme se omezovat jen na čísla, Python umí pracovat také s\n<i>řetězci</i>, čímž prostě rozumíme nějaký kus textu. Zatím se jen naučíme je\nvypisovat a skládat za sebe — ke skládání slouží operátor <code>+</code>.\nNesnažte se za sebe skládat číslo a řetězec, to si Python stěžuje — je potřeba\nmu explicitně říct, že z toho čísla má udělat řetězec:\n\n</p><pre>x = 13\ny = \"ahoj\"\nz = str(x) + y\nprint(z)\n</pre>\n\n<p>vypíše <code>13ahoj</code>.\n\n</p><p>Příkaz <code>print</code> může dostat víc <i>argumentů</i> oddělených čárkou\n– ty vypisuje na výstup oddělené mezerou. Navíc za tohle všechno ještě připíše\npřechod na nový řádek, takže cvičení: Jaký je rozdíl mezi těmito programy?</p>\n\n<ol><li><code>print(\"a\" + \"b\")</code> </li><li><code>print(\"a\", \"b\")</code>\n</li><li><code>print(\"a\")<br>print(\"b\")</code> </li></ol>\n\n<p>Python toho umí s řetězci daleko víc, ale na to se podíváme až v některém z\ndalších dílů. Ještě na závěr připojme poznámku, že pokud si do programu chcete\nnapsat nějaký komentář (a často se to hodí, abyste i za týden věděli, co to\nvlastně dělá), tak všechno od znaku <code>#</code> do konce řádku se ignoruje\n(pokud ten znak zrovna není součástí řetězce — <code>print(\"#a\")</code> opravdu\nvypíše <code>#a</code>).\n\n</p><p>Nakonec čistě technická záležitost – kódování. Python 3 automaticky počítá s tím,\nže jeho vstup, výstup, program, všechno, je v UTF-8. Pokud vám textový editor\nvyrábí soubory v jiném kódování, zkuste se porozhlédnout v jeho nastavení,\njestli tam náhodou není volba kódování. (Většinou tam je.)\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-2-vstup-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-2-vstup-text"
            ],
            "title": "Čtení vstupu",
            "htmlAssignment": "<p>Na vstupu dostanete zvlášť na každém řádku řetězec a postupně 4 čísla <i>a</i>, <i>b</i>, <i>c</i>, <i>d</i>.</p>\n\n<p>Vaším úkolem je vypsat:</p>\n<ul>\n<li>Na první řádek <i>b</i> znaků z řetězce od indexu <i>a</i> včetně. Indexujeme od nuly.</li>\n<li>Na druhý řádek všechny znaky řetězce bez <i>c</i> znaků na začátku a <i>d</i> znaků na konci.</li>\n</ul>",
            "points": 5,
            "taskReference": "zkp-2-vstup",
            "position": [
                287.5387725830078,
                858.3400348424911
            ]
        },
        {
            "id": "zkp-2-vstup-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-1-uvod-task"
            ],
            "position": [
                110.11795234680176,
                803.2035207748413
            ],
            "title": "Čtení vstupu",
            "htmlContent": "<p>Co by to bylo za program, který by si něco počítal a vůbec by si nepřečetl,\nco mu říkáme na vstupu? K tomu slouží různé funkce, pro začátek nám bude\nstačit <code>input</code>. Vyzkoušejte následující program:\n\n</p><pre>print(\"Jak se jmenuješ?\")\na = input()\nprint(\"Zadal jsi jméno:\", a)\n</pre>\n\n<p>Funkce <code>input()</code> umí i rovnou zadat dotaz. Jaký je rozdíl mezi\nnásledujícím programem a předchozím?\n\n</p><pre>a = input(\"Jak se jmenuješ? \")\nprint(\"Zadal jsi jméno:\", a)\n</pre>\n\n<p>Funkce <code>input()</code> vrací řetězec. Jak z něj udělat číslo?\nFunkcemi <code>int()</code> pro celé číslo nebo\n<code>float()</code> pro desetinné číslo. Pokud bude na vstupu něco, co se na\nčíslo převést nedá (zkuste si zavolat <code>int(\"bagr\")</code>), program si\nnebere servítky a spadne. Co s tím, si ukážeme někdy později, protentokrát nám\nbude stačit ujištění, že u úloh KSP tohle řešit nemusíme — data vždy splňují\nformát v zadání (není-li explicitně uvedeno jinak).\n\n</p><p>Některé vstupy jsou příliš velké na to, abyste je na vstup přenášeli\nmetodou Copy-Paste, takže je možné si vstup <i>přesměrovat ze souboru</i>. To\nby měla umět jak linuxová, tak windowsová příkazová řádka. Spouštíte-li tedy\nprogram příkazem <code>python prg.py</code>, stačí za to připsat\n<code>&lt;vstup</code> a systém předstírá, že jste programu zadali postupně\ncelý soubor „vstup“ na klávesnici.\n\n</p><p>Podobně lze přesměrovat i výstup konstrukcí <code>&gt;vystup</code>. Takže\npro zpracování vstupu úlohy pravděpodobně použijete něco jako\n<code>python program.py &lt;01.in &gt;01.out</code>, počkáte, až program doběhne,\na pošlete nám soubor <code>01.out</code>…\n\n</p><p>Zkuste si tedy napsat program, který na vstupu přijme celé číslo a vypíše\njeho dvojnásobek (nebo třetí mocninu, nebo výsledek jakékoli jiné operace).\nNavíc… zkuste odhadnout, co dělá tento program:\n\n</p><pre>a = int(input())\nb = int(input())\nprint(a, \"+\", b, \"=\", a+b)\n</pre>\n\n<p>Python má však daleko mocnější matematiku, kterou je však třeba nahrát\npříkazem <code>import math</code>. Tím se zpřístupní nejrůznější matematické\nfunkce (goniometrické, logaritmy, …). Volají se pak takto:\n<code>math.sin(10)</code> — znamená to: „Vezmi <i>objekt</i> <code>math</code>\na použij z něj funkci <code>sin</code>.“ Objekt si můžete představit jako\ntakovou černou skříňku, která vám poskytuje nějaké funkce a nějaká data,\npřičemž se typicky vůbec nemusíte starat o to, jak to uvnitř vypadá. Kompletní\npřehled obsahu <code>math</code> získáte v interaktivním módu po zadání\n\n</p><pre>import math\nhelp(math)\n</pre>\n\n<p>Slíbili jsme si minule, že si povíme něco víc o řetězcích. Ony jsou totiž\npro Python také objekty. Napíšete-li tedy <code>x = \"ahoj\".upper()</code>,\nbudete mít v proměnné <code>x</code> řetězec <code>AHOJ</code>, neboť funkce\n<code>upper</code> udělá z malých písmen velká (na písmenkách s diakritikou to\nmoc nefunguje). Kompletní přehled je možno získat zase v interaktivním módu po\nzadání <code>help(str)</code>.\n\n</p><p>Občas je potřeba umět určit délku řetězce. Na to se používá funkce\n<code>len()</code>, která toto určí: <code>print(len(\"asdfghjkl\"))</code>\nvypíše <code>9</code>, což je přesně počet znaků v řetězci.\n\n</p><p>V řetězci navíc můžeme indexovat: <code>a[i]</code> je <code>i</code>-té\npísmenko řetězce <code>a</code>, přičemž indexujeme od nuly:\n<code>\"abcdefgh\"[4]</code> je <code>\"e\"</code>. Co však udělat nemůžete, je\npřiřazení do písmenka: <code>a[3] = \"x\"</code> skončí chybou.\n\n</p><p>Můžeme dokonce vytáhnout z řetězce jeho část: <code>a[i:j]</code> je kus\nřetězce <code>a</code>, který začíná jeho <code>i</code>-tým znakem a končí\n<b>před</b> jeho <code>j</code>-tým znakem (pozor, indexujeme od nuly). Takže\n<code>\"abcdefgh\"[2:4]</code> je <code>\"cd\"</code>. Jako cvičení zkuste přijít\nna to, co se stane, když nějakou z těchto mezí vynecháme (např.\n<code>a[2:]</code>), a co když použijeme zápornou mez nebo číslo přesahující\ndélku řetězce…\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-3-podminky-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-3-podminky-text"
            ],
            "title": "Podmínky a cykly",
            "htmlAssignment": "<p> Na vstupu dostanete <strong>na prvním řádku číslo <i>N</i></strong> a na dalších <i>N</i> řádcích vždy jedno číslo 2 ≤ <i>K<sub>i</sub></i> ≤ 10000.\n</p><p> Vaším úkolem je pro každé číslo <i>K<sub>i</sub></i> vypsat jeden řádek s řetězcem <code>PRVOCISLO</code>, pokud je číslo prvočíslo, a nebo <code>SLOZENE</code>, pokud není prvočíslo.\n\n</p><p>Vzorový vstup:\n</p><pre>5\n7\n15\n21\n3\n37\n</pre>\n<p>Příslušný výstup:\n</p><pre>PRVOCISLO\nSLOZENE\nSLOZENE\nPRVOCISLO\nPRVOCISLO\n</pre>\n\n<p>Tedy, 5 čísel na vstupu, z toho 7, 3 a 37 prvočísla a 15 a 21 složená.</p>",
            "points": 5,
            "taskReference": "zkp-3-podminky",
            "position": [
                314.95473861694336,
                935.5432705879211
            ]
        },
        {
            "id": "zkp-3-podminky-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-2-vstup-task"
            ],
            "position": [
                147.19595527648926,
                888.0644521713257
            ],
            "title": "Podmínky a cykly",
            "htmlContent": "<p>Byla by to neskutečná nuda, kdyby náš program vždycky běžel stejně —\nprovedl stejné příkazy od začátku do konce a skončil. On by taky byl často\ndost k ničemu. Proto existuje podmínka, neboli větvení.\n\n</p><p>Jak na to? Použijeme příkaz <code>if</code>, za něj napíšeme podmínku a\npotom\tpříslušné dvě varianty kódu. Jedna se provede, pokud je podmínka\nsplněna, druhá v opačném případě — při nesplnění.\n\n</p><pre>a = int(input())\nif a % 2 == 1:\n\tprint(\"Zadané číslo je liché.\")\nelse:\n\tprint(\"Zadané číslo je sudé.\")\n</pre>\n\n<p>Vysvětleme si, co jsme vlastně napsali. Program přečte ze vstupu číslo a\nvypíše, jestli je liché nebo sudé. Jak to dělá? Za slovem <code>if</code> je\nnapsaná podmínka. Ta je datového typu <i>logická hodnota</i>. Stejně jako máme typ\n<i>řetězec (str)</i>, <i>celé číslo (int)</i> nebo <i>desetinné číslo\n(float)</i>, tak nyní budeme mít navíc typ <i>logická hodnota (bool)</i>.\nTen může nabývat hodnoty <i>pravda (True)</i> nebo <i>nepravda (False)</i>.\n\n</p><p>K vytvoření logické hodnoty použijeme operátor porovnání <code>==</code>\n(pozor, neplést s operátorem přiřazení <code>=</code>). Vrací True tehdy a jen\ntehdy, když se levá strana rovná pravé. V našem případě je zrovna pravá strana\nvždy rovna 1, takže si program spočítá zbytek po dělení <code>a</code>\ndvěma, což je 1 pro všechna lichá čísla. Tedy pokud jsme zadali liché číslo,\npodmínka se vyhodnotí jako True.\n\n</p><p>Hodnotu True převezme příkaz <code>if</code>, který rozhodne, že se provede\nhned ta větev kódu, která následuje za ním. Pokud by číslo liché nebylo (resp.\npodmínka by nebyla splněna, vyhodnotila by se jako False), větev by se\nneprovedla.\n\n</p><p>Abychom nepřišli zkrátka ani ve druhém případě, existuje klíčové slovo\n<code>else</code>, po kterém následuje větev (<i>blok</i>) provedená při\nnesplnění podmínky. Tuhle větev můžeme klidně vynechat a nikomu to vadit\nnebude. Takže i následující kód je správně.\n\n</p><pre>a = int(input())\nif a == 0:\n\tprint(\"Na vstupu byla nula.\")\n\tprint(\"Sakra lidi, to vás fakt nenapadlo nic lepšího než nula?\")\n\nprint(\"Ahoj ☺\")\n</pre>\n\n<p>Předložený program si nejprve postěžuje, pokud na vstupu byla\nnula (pokud ne, tak mu to nevadí), a pak pozdraví „Ahoj ☺“.\n\n</p><p>Povšimněte si zásadní věci. Kód celé jedné větve je stejně <i>odsazen</i>.\nTo je důležité pro rozpoznání, který příkaz patří ještě do stejného bloku a\nkterý už ne. Je na vás, jak bude odsazování vypadat. Buď to je znak tabulátoru,\nnebo skupina mezer. Musí to být ale konzistentní, jinak si Python bude stěžovat.\n\n</p><p>Co když potřebujeme rozlišit více variant než dvě? Tento kód počítá výraz\n<i>1/|a|</i> (převrácená hodnota absolutní hodnoty)\n\n</p><pre>if a == 0:\n\tprint(\"Nulou neumím dělit.\")\nelse:\n\tif a &gt; 0:\n\t\tprint(1/a)\n\telse:\n\t\tprint(-1/a)\n</pre>\n\n<p>Vidíte tu zradu v odsazování? Kdybychom potřebovali ještě víc možností,\nutekl by nám kód nepřiměřeně doprava. Proto existuje ještě klíčové slovo\n<code>elif</code>, kterým se tohoto odsazení můžeme zbavit. Vysvětlení\npříkladem (kód je ekvivalentní tomu předchozímu):\n\n</p><pre>if a == 0:\n\tprint(\"Nulou neumím dělit.\")\nelif a &gt; 0:\n\tprint(1/a)\nelse:\n\tprint(-1/a)\n</pre>\n\n<p>Často potřebujeme podmínku ověřovat ne jednou, ale opakovaně. Potřebujeme\nvytvořit cyklus. K tomu slouží klíčové slovo <code>while</code>, které vždy\nověří podmínku; je-li True, provede blok; ověří podmínku; je-li True, provede\nblok; ověří podmínku; je-li True, … Když není podmínka splněna, blok se už\nneprovede a pokračuje se na další příkaz.\n\n</p><p>Ukažme si funkčnost <i>while-cyklu</i> na příkladu. Následující program čte\nze vstupu čísla, dokud jsou nenulová. Nulou je ukončen vstup; program pak\nvypíše maximum z těchto čísel. Všimněte si, že zde v podmínce používáme druhý\nz operátorů porovnání: <code>!=</code>, který je True tehdy a jen tehdy,\nmají-li výrazy na levé a na pravé straně navzájem různou hodnotu.\n\n</p><pre>a = int(input())\nprazdny_vstup = True\nmax = a\nwhile a != 0:\n\tif a &gt; max:\n\t\tmax = a\n\ta = int(input())\n\tprazdny_vstup = False\n\nif prazdny_vstup:\n\tprint(\"Na vstupu nebylo žádné číslo\")\nelse:\n\tprint(\"Maximum ze zadaných čísel je\", max)\n</pre>\n\n<p>Podmínky můžeme spojovat spojkami <code>and</code> (musí platit obě) a\n<code>or</code> (musí platit alespoň jedna), případně použít operátor\n<code>not</code> – negaci. Víc asi ukáže příklad šíleného výrazu:\n\n</p><pre>if not( (x &gt; 0 and x &lt; 256) or (y &gt;= 0 and y &lt; 256) ) or (z == 1):</pre>\n\n<p>Ještě poznamenejme, že uprostřed cyklu můžeme napsat příkaz\n<code>break</code>, kterým cyklus opustíme a skočíme na nejbližší další\npříkaz. Také se používá příkaz <code>continue</code>, kterým přeskočíme zbytek\ncyklu a spustíme další <i>iteraci</i>.\n\n</p><p>To je v této lekci vše a už zbývá akorát úloha.\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-4-seznamy-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-4-seznamy-text"
            ],
            "title": "Seznamy",
            "htmlAssignment": "Na vstupu dostanete 2 číselné neseřazené seznamy A, B. Vaším úkolem je spočítat počet dvojic stejných čísel (první je ze seznamu A, druhé z B). Čísla se v seznamech mohou opakovat..\n<br><br>\nNa prvním řádku dostanete počet prvků N v seznamu A, na následujících N řádcích je seznam A. Na následujícím řádku počet prvků M v seznamu B. A na posledních M řádcích prvky seznamu B.\nNa výstup vypište počet daných dvojic.\n<br><br>\n<i>Příklad:</i>\nSeznam A obsahuje čísla 5, 3, 1, 4, 8, 5, seznam B 8, 1, 6, 5, 5, 19, 1, 3. Výsledek je 8.",
            "points": 5,
            "taskReference": "zkp-4-seznamy",
            "position": [
                377.74313163757324,
                1006.949652671814
            ]
        },
        {
            "id": "zkp-4-seznamy-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-3-podminky-task"
            ],
            "position": [
                209.17204475402832,
                983.7605276107788
            ],
            "title": "Seznamy",
            "htmlContent": "<p>Dosud jsme si povídali o datových typech, do kterých se vejde jen jedna\nhodnota (s výjimkou řetězce, se kterým ale zase nic moc neumíme). To je velice\nnepraktické, když si představíme, že bychom třeba potřebovali různě číst\ndvoumegový soubor…\n\n</p><p><i>Seznam</i> je jednorozměrná <i>datová struktura</i>, do které můžeme\nukládat různá data. Můžeme si ho představit klidně jako seznam věcí, které\nmáme nakoupit, seznam čísel, která si vsadíme do loterie, …\n\n</p><p>Je zvykem ukládat si do seznamů vždy data stejného typu (třeba jen celá\nčísla), i když by bylo možné je míchat. Ještě lepší je ukládat si tam jen\ndata stejného <b>druhu</b>, to znamená, že pokud si ukládáte počty jablek,\nhrušek a švestek, tak budete mít jedno pole na jablka, druhé na hrušky a třetí\nna švestky. <small>Správné řešení je, pokud to jde, ještě jiné. Máte-li\ntřeba mnoho zákazníků a každý si koupí J jablek, H hrušek a Š švestek, tak si\ntyhle záznamy ukládáte jako pole <i>trojic</i> (J, H, Š), takže je budete mít\nvždycky pohromadě. O tom více v příští kapitole.</small>\n\n</p><p>Jak seznam zapsat? Do hranatých závorek se napíšou jednotlivé hodnoty\noddělené čárkami: <code>s = [1, 3, 4, 7, 2, 5]</code> vytvoří proměnnou\n<code>s</code>, ve které je seznam o 6 položkách (těch zadaných).\n\n</p><p>To je sice hezké, ale jak se seznamem pracovat? Můžeme přistupovat k\njednotlivým položkám pomocí hranatých závorek: <code>s[2]</code> je třetí\nprvek seznamu, tedy v našem příkladě 4 (indexujeme od nuly),\n<code>s[x:y]</code> vezme část seznamu od prvku s indexem <code>x</code> po\nprvek s indexem <code>y-1</code> včetně. Jako cvičení si zkuste přijít na to,\nco se stane, když jeden z těchto <i>slice indexů</i> vynecháme\n(<code>s[:3])</code>, <code>s[2:]</code>)…\n\n</p><p>Nepřipomíná vám to něco? Ano, řetězec je vlastně speciální druh seznamu —\nseznam znaků. Proto téměř všechno, co jsme se naučili o řetězcích, můžeme\nlogicky použít i na seznamy: <code>len()</code> vrací počet prvků seznamu.\nSeznamy můžeme za sebe spojovat operátorem <code>+</code>. Neplatí to úplně —\nněkteré <i>metody</i> řetězců nemůžeme používat na seznamy (třeba funkci\n<code>upper</code>, <code>lower</code>, … ☺) a některé metody seznamů\nnemají zase řetězce, zvláště ty, které si ukážeme dále. Pokud to chcete vědět\núplně přesně, zkuste <code>help(str)</code> a <code>help(list)</code>.\n\n</p><p>Seznam je tedy také objekt. Mějme tedy <code>s</code> nějaký seznam a\npodívejme se, jaké všechny psí kusy s ním dokážeme provádět:\n</p><ul>\n<li><code>s.append(x)</code> přidá prvek <code>x</code> na konec seznamu.\n</li><li><code>s.count(x)</code> vrátí počet výskytů prvku <code>x</code> v seznamu.\n</li><li><code>s.index(x)</code> najde první výskyt prvku <code>x</code> v seznamu.\n</li><li><code>s.insert(i,x)</code> vloží prvek <code>x</code> do seznamu\n<b>před</b> prvek s indexem <code>i</code>.\n</li><li><code>s.pop(i)</code> ze seznamu odstraní prvek na pozici <code>i</code> a\nvrátí jej.\n</li><li><code>s.reverse()</code> seznam otočí <b>na místě</b>, to znamená, že od\nteď máte seznam <code>s</code> otočený.\n</li><li><code>s.sort()</code> seznam <i>setřídí</i> (seřadí podle velikosti\nprvků). Lze definovat i způsob, jakým je seznam tříděn, ale o tom až později. Taktéž <b>na místě</b>. Pokud jste si neuložili původní uspořádání někam jinam, tak jste o něj prachsprostě přišli.\n</li></ul>\n\n<p>Tyto funkce se dají jednoduše použít, když potřebujeme <i>frontu</i> nebo\n<i>zásobník</i>:\n\n</p><p>Frontu, neboli strukturu typu <i>FIFO</i> (first in — first out: prvek,\nkterý vložíme jako první, také první vyjmeme) vytvoříme jako obyčejný seznam.\nVkládat do fronty budeme funkcí <code>append</code>, vyjímat pak funkcí\n<code>pop(0)</code>.\n\n</p><p>Vytvořit zásobník je ještě jednodušší. Je to struktura typu <i>LIFO</i>\n(last in — first out: „první budou poslední“), k jejímuž vytvoření taktéž\npoužijeme seznam. Operace vložení je zase <code>append</code>, vyjímat budeme\npřekvapivě funkcí <code>pop()</code>, tentokrát však s prázdnými závorkami —\ntakto se vyjme právě poslední prvek …\n\n</p><p>To ještě pořád není všechno. Existuje konstrukce, které se říká\n<i>for-cyklus</i>. Tato konstrukce vezme seznam, prochází jej po prvcích pěkně\nod začátku do konce a pro každý prvek spustí zadaný blok. Dost teorie,\nukážeme si to na příkladu.\n\n</p><pre>s = [1, 6, 115, 9, 7, 0]\nfor p in s:\n\tprint(p)\n\na = 0\nfor p in s:\n\ta += p\n\tprint(a)\n</pre>\n\n<p>Program nejprve vypíše všechny prvky seznamu, na každý řádek jeden, potom\npočítá <i>prefixové součty</i> (součet vždy prvních několika prvků seznamu) a\npo řadě je všechny vypíše.\n\n</p><p>For-cyklus se také používá na provedení předem zadaného počtu iterací. Na\nto se používá funkce <code>range(x)</code>, která vrací celá čísla od\n<i>0</i> do <i>x-1</i>. Takže následující konstrukce vypíše všechna čísla od 1\ndo 100:\n\n</p><pre>for i in range(100):\n\tprint(i+1)\n</pre>\n\n<p>Pozor, ačkoliv se <code>range(x)</code> chová jako seznam čísel, \nve skutečnosti jde o tzv. <i>iterátor</i>. Představte si jej jako seznam,\nkterý se nevytvoří okamžitě, ale hodnoty v něm se spočítají v momentě, \nkdy jsou v programu potřeba. Proto <code>range(50)</code> nevypíše\nseznam čísel od 0 do 50, ačkoliv <code>range(50)[1]</code> správně vrátí\njedničku. Pokud byste si přece jen celý seznam chtěli zobrazit, použijte\nfunkci <code>list</code>, např. <code>print(list(range(50)))</code>\n\n</p><p>Poslední věcí, kterou si tady ukážeme, je generátor seznamu. Funguje to\ntak, že mu předhodíme nějaký jiný seznam a předpis, co s ním má udělat, aby\nvznikl seznam nový. Radši ukázka příkladem:\n\n</p><pre>druhe_mocniny = [a**2 for a in range(100)]\nlicha_cisla = [2*a + 1 for a in range(100)]\nmocniny_dvou = [2**a for a in range(100)]\notitulovani = [\"profesor \" + jmeno for jmeno in hoste]\n</pre>\n\n<p>Od začátku — v prvním příkazu jsme vzali čísla 0 až 99 a každé z nich jsme\numocnili na druhou. Ve druhém vyrábí výraz <i>2a + 1</i> naprosto spolehlivě\nlichá čísla. Ve třetím jsme akorát otočili výraz z prvního příkazu a máme hned\nmocniny dvojky. Celé pole se opravdu hned počítá a obvykle bez nějakých\nvelkých optimalizací, takže na <code>hm = [2**2**2**a for a in\nrange(2000)]</code> si nějakou tu chvilku (sakra dlouho) počkáme …\n\n</p><p>Poslední příkaz pak ukazuje, že tohle můžeme klidně použít i na jiné datové\ntypy, třeba řetězce — máme-li pole řetězců, můžeme pracovat s jednotlivými\nřetězci; dokonce se takhle můžeme chovat i k řetězci – explicitní rozsekání\nřetězce na znaky vůže vypadat třeba takto: <code>[a for a in retezec]</code>\n\n</p><p>S generátorem seznamu se dají dělat i daleko šílenější věci, ale o tom\ntřeba někdy příště. Za domácí úkol zkuste vyzkoumat, co dělá následující kód,\nresp. jak to dělá. Všimněte si zvláště vnoření polí (vznikne pak jakási tabulka)\na dvouparametrové varianty funkce <code>range</code>.\n\n</p><pre>for pole in [[a * b for b in range(1,11)] for a in range(1,11)]:\n\tout = \"\"\n\tfor i in pole:\n\t\tout += str(i) + \"\\t\" \n\tprint(out)\n</pre>\n\n<p>Na závěr pak obligátní úloha.\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-5-dalsi-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-5-dalsi-text"
            ],
            "title": "Další datové typy",
            "htmlAssignment": "<p>Ve škole od nepaměti žijí studenti a profesoři. Stejně tak od nepaměti\nplatí, že kdykoliv se studenti sejdou, začnou si vyprávět veselé historky\no svých profesorech.\n\n</p><p>Pro každého studenta víme, kteří profesoři ho učí. Vaším úkolem je zjistit:\n\n</p><ul>\n<li>Existuje profesor, který učí všechny studenty?\n</li><li>Kteří 2 studenti mohou společně pomlouvat nejvíce profesorů? Řeči přitom vedou jen o profesorech, kteří učí aspoň jednoho z nich.\n</li></ul>\n\n<p>Na prvním řádku vstupu je číslo N (počet studentů). Na dalších řádcích je\nvždy popořadě napsáno jméno i-tého studenta, počet jeho profesorů K<sub>i</sub> a K<sub>i</sub>\nřádků se jmény profesorů (jména jsou navzájem různá).\n\n</p><p>Na první řádek vypište jméno libovolného profesora, který učí všechny\nstudenty, nebo řetězec NEEXISTUJE, pokud žádný takový není. Na druhý řádek\nvypište 2 jména oddělená mezerou, jména studentů, které dohromady učí\nnejvíce profesorů. Pokud takových dvojic existuje více, vypište libovolnou\nz nich.\n\n\t\t\t\t</p>",
            "points": 7,
            "taskReference": "zkp-5-dalsi",
            "position": [
                507.7067070007324,
                1098.6674432754517
            ]
        },
        {
            "id": "zkp-5-dalsi-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-4-seznamy-task"
            ],
            "position": [
                305.1903476715088,
                1060.1553030014038
            ],
            "title": "Další datové typy",
            "htmlContent": "<p>Ukážeme si další datové typy, resp. konstrukce. Prvním často používaným\ntypem je <i>tuple</i>. Tento název zní podivně, dokud si neuvědomíme, že jde\no zobecnění anglických výrazů „double“, „triple“, … rozumným překladem by tedy\nbylo <i>n</i>-tice. Tuple zapisujeme do kulatých závorek:\n\n</p><pre>jméno = (\"Petr\", \"Novák\")\nadresa = (\"Boženy Němcové\", \"42\", \"Zábřeh na Moravě\", \"789 01\")\n</pre>\n\n<p>K čemu se nám prakticky hodí? Jsou rychlejší než seznamy. Nedají se totiž\nměnit. Jednou vytvořenou tuple už nikdy nezměníte, takže se velice dobře\noptimalizuje. Zároveň pokud prostě potřebujete seznam konstant, tak je to\nčistší, neboť jakýkoli pokus o zápis Python odchytne a stěžuje si.\nZ následujícího přikladu je tedy výhodnější použít druhý řádek, pokud si\nnehodláte definovat vlastní týden:\n\n</p><pre>dny_v_tydnu = [ \"Pondělí\", \"Úterý\", \"Středa\", \"Čtvrtek\", \"Pátek\", \"Sobota\", \"Neděle\" ]\ndny_v_tydnu = ( \"Pondělí\", \"Úterý\", \"Středa\", \"Čtvrtek\", \"Pátek\", \"Sobota\", \"Neděle\" )\n</pre>\n\n<p>Další zajímavá věc je to, že můžeme udělat současné přiřazení do\nproměnných. Jak se to používá? Vizte příklad:\n\n</p><pre>(a, b) = (b, a) # výměna hodnot\n\n# výpočet n-tého Fibonacciho čísla (F(n))\nf = 1\nl = 0\nfor i in range(n):\n\t(f, l) = (f+l, f)\nprint(f)\n\n# dny v týdnu jako konstanty 0..6\n(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)\n</pre>\n\n<p>A poslední užitečná věc, na kterou se tuple hodí, je pohodlné generování\nřetězců. Příklad mluví za vše:\n\n</p><pre>a = 3\nb = 16\nprint(\"%d + %d = %d\" % (a, b, a+b))\nprint(str(a),\"+\",str(b),\"=\",str(a+b))\n</pre>\n\n<p>Příklad vypíše dva stejné řádky: <code>3 + 16 = 19</code>. Je snad jasné,\nkterý je přehlednější. Jak to celé funguje? Do řetězce napíšeme nějaké\n<i>formátovací značky</i>, místo kterých se do něj vloží příslušná hodnota. Ty\nzačínají znakem <code>%</code> a končí nějakým písmenem, mezi ně se vkládají\n<i>modifikátory</i>.\n\n</p><p>Možná písmena jsou následující:\n\n</p><ul>\n<li>d, i, u: celé číslo\n</li><li>e, f, g; E, F, G: desetinné číslo; vyzkoušejte si sami rozdíl\n</li><li>c: jeden znak\n</li><li>o, x, X: hodnota v osmičkové soustavě nebo v šestnáctkové s malými\npísmeny, nebo s velkými písmeny\n</li><li>r, s: řetězec (existuje rozdíl, nicméně je tak nepatrný, že ho při běžné\npráci nepostřehnete …)\n</li><li>%: %\n</li></ul>\n\n<p>Před písmeno můžete předřadit celé číslo, kterým sdělujete, kolik\n<b>minimálně</b> znaků má\nnahrazená formátovací značka zabrat. Zbytek se doplní mezerami zleva:\n<code>\"%10d\" % 15</code> se expanduje na <code>\"        15\"</code>. Pokud\nvypisujeme desetinné číslo, můžeme regulovat počet znaků před a počet znaků za\ndesetinnou čárkou: <code>%4.3f</code> určuje 4 znaky před a 3 znaky za čárkou.\nLibovolné z těchto čísel můžeme vynechat.\n\n</p><p>Pak máme modifikátory:\n\n</p><ul>\n<li>-: zarovnej vlevo, ne vpravo\n</li><li>0: nedoplňuj mezerami, ale nulami\n</li><li><i>mezera</i>: pro kladné číslo ponechej mezeru navíc, pro záporné číslo vypiš znaménko\n</li><li>+: vypiš znaménko vždy (+ i -)\n</li></ul>\n\n<p>To rozhodně není všechno; kompletní přehled si přečtěte (anglicky) v <a href=\"https://docs.python.org/3.1/library/string.html#format-string-syntax\">dokumentaci\nk Pythonu</a>.\n\n</p><p>Další struktura, kterou zde ukážeme, je <i>asociativní pole</i> –\npředstavte si seznam, ve kterém můžeme indexovat ne čísly, ale třeba dvojicí\nčísel nebo řetězci. Ten se už (logicky) nedá řadit, neboť samy indexy netvoří\nrozumnou posloupnost, ale může se hodit na spoustu jiných věcí.\n\n</p><pre>dns_to_ip = {\"localhost\":\"127.0.0.1\", \"ksp.mff.cuni.cz\":\"195.113.26.206\",\n\"www.google.com\":\"74.125.127.99\", \"lzicka.ksp.ucw.cz\":\"172.20.20.20\"}\n</pre>\n\n<p>K asociativnímu poli přistupujeme stejně jako k seznamu:\n<code>dns_to_ip[\"ksp.mff.cuni.cz\"]</code> vrátí <code>195.113.26.206</code>.\nMůžeme jej indexovat i tuplemi, ne však třeba seznamy. Tohle platí do hloubky,\ntakže klidně můžeme psát <code>pole[((13,15),(\"bagr\", 5), \"kombajn\")]</code>\n(indexování šílenou tuplí), nicméně konstrukce <code>pole[(3, [1, 2])]</code>\npoužita být nesmí.\n\n</p><p>Ano, odhadujete správně. Na indexování v asociativním poli můžeme použít\nvšechno, co je <i>read-only</i> – jen pro čtení. Což je číslo, řetězec,\ntuple, ale samo asociativní pole to třeba není. Jinak se asociativní pole\nchová velmi podobně jako seznamy; pro opravdu podrobný popis se podívejte do\ndokumentace.\n\n</p><p>Poslední věc, kterou si ukážeme, je množina (set) a zamrzlá množina\n(frozenset). Rozdíl mezi nimi je jediný – frozenset je jen pro čtení\n– nedá se po vytvoření měnit, a tedy se dá použít na indexování\nasociativního pole. Jak je vytvořit?\n\n</p><pre>s = set([\"a\", \"b\", 315])\nfs = frozenset(s)\n</pre>\n\n<p>Jako parametr funkci <code>set</code> nebo <code>frozenset</code> můžeme\npředat pole, tupli, množinu… prostě všechno, přes co se dá cyklit příkazem\n<code>for</code> (tomu se říká obecně <i>iterable</i> – iterovatelná datová\nstruktura).\n\n</p><p>V množině může být členem cokoli, čím můžeme indexovat v asociativním poli …\nje to vlastně asociativní pole, kde ale můžeme indexovat jen hodnoty\nTrue/False (v množině je nebo není).\n\n</p><p>S množinami můžeme dělat různé operace: jsou-li <code>a</code> a\n<code>b</code> dvě množiny, pak <code>a &amp; b</code> je jejich průnik a\n<code>a | b</code> jejich sjednocení.\n\n</p><p>Tolik bylo teorie. Nyní si to procvičíme prakticky.</p>"
        },
        {
            "id": "zkp-6-funkce-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-6-funkce-text"
            ],
            "title": "Funkce",
            "htmlAssignment": "<p>Na vstupu dostanete nějaké číslo v desítkovém zápisu (zapsané v desítkové soustavě). Nalezněte takové <i>Z</i> ≥ 2, aby zápis zadaného čísla v <a href=\"http://cs.wikipedia.org/wiki/Poziční_číselná_soustava\">číselné soustavě</a> o základu <i>Z</i> končil na největší možný počet nul. Je-li takových možných <i>Z</i> víc, odpovíte největším možným z nich.\n\n</p><p>Příklady: Na vstup <code>100000</code> odpovíte <code>10</code>; na vstup <code>54</code> odpovíte <code>3</code> (trojkový zápis 2000); na vstup <code>182707930597500</code> odpovíte <code>77</code>.\n\n\t\t\t\t</p>",
            "points": 8,
            "taskReference": "zkp-6-funkce",
            "position": [
                560.1033248901367,
                1174.8378257751465
            ]
        },
        {
            "id": "zkp-6-funkce-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-5-dalsi-task"
            ],
            "position": [
                387.8987216949463,
                1143.8511953353882
            ],
            "title": "Funkce",
            "htmlContent": "<p>Důležitou možností v programování je volání funkcí. Tím si programátoři\nvýrazně šetří práci – jako funkci je možné napsat téměř cokoli, co pak\nakorát opakovaně voláme. Navíc, když se v kusu kódu objeví chyba a zjistíme,\nže je rozkopírován na stovce míst porůznu po zdrojáku, tak je potřeba ji\nopravit. Stokrát. Mít ten kód ve funkci, opravujeme to jen jednou.\n\n</p><p>Úplně první základní funkcí bude chybová hláška. Tu ve většině programů\nvskutku voláme na víc místech, resp. pořád.\n\n</p><pre>def error():\n\tprint(\"Error in matrix!\")\n\nerror()\n\n</pre>\n\n<p>Tento program vypíše <code>Error in matrix!</code> a skončí. Co jsme\nvlastně udělali? Klíčovým slovem <code>def</code> definujeme funkci, která má\nnázev <code>error</code> (nebo jiný identifikátor, který si vybereme). Za\nnázvem funkce jsou kulaté závorky, ve kterých zatím nic není (ale bude,\nnebojte), a dvojtečka.\n\n</p><p>Dvojtečka uvozuje co? Správně hádáte – blok kódu. Následující blok\nbude považován za vnitřek funkce a vždy, když funkci zavoláme, tak se provede\ntento blok kódu.\n\n</p><p>Funkci voláme tak, že uvedeme název funkce a za něj kulaté závorky. Zatím\nprázdné. Nemusíme ji volat jen jednou jako v předchozí ukázce:\n\n</p><pre>def trest():\n\tprint(\"Nemám jíst křídu.\")\n\nfor i in range(100):\n\ttrest()\n</pre>\n\n<p>Nebo jiná možnost:\n\n</p><pre>def error():\n\tprint(\"Některá čísla nechci.\")\n\texit()\n\nif x &lt; 0:\n\terror()\nif y &lt; 0:\n\terror()\nif z &lt; 0:\n\terror()\n</pre>\n\n<p>Ano, mohli bychom použít logické spojky <code>or</code>, ale\nz pedagogických důvodů toto neučiníme. Může se jednat třeba o nějakou\ntransakci složenou z více kroků, kdy vždycky uděláme krok a zjistíme, jestli\nse povedl. Tady se nám ale bude hodit volání funkce s parametrem. Viz příklad:\n\n</p><pre>def error(text):\n\tprint(text)\n\texit()\n\n# v proměnné `success' se ukládá, jestli transakce proběhla\notevriSoubor()\nif not(success):\n\terror(\"Chyba otevírání souboru.\")\nprectiSoubor()\nif not(success):\n\terror(\"Chyba čtení souboru.\")\nzpracujData()\nif not(success):\n\terror(\"Chyba zpracování dat.\")\n</pre>\n\n<p>Tenhle příklad je ošklivý, protože se více funkcí pere o jednu globální\nproměnnou, do které si něco ukládají. Když už, tak by tuhle informaci mohly\nmít jako návratovou hodnotu (viz dále). Kromě toho v Pythonu\nexistuje na ošetřování chyb lepší mechanismus – výjimky. O těch si\npovídat v základním kurzu nebudeme, i když to nic složitého není. Tohle byl\nopravdu jen a pouze ilustrativní příklad na funkci s parametrem.\n\n</p><p>Do závorek jsme v definici vložili jméno (zatím) jednoho parametru –\n<code>text</code>. Ten jsme určili až při volání funkce. Takže když zavoláme\n<code>error(\"Ahoj\")</code>, vypíše se <code>Ahoj</code> a program skončí.\n\n</p><p>Mimochodem, takhle funguje rovnou samotná funkce <code>exit</code>, která\numožňuje předat parametr, který se vypíše před ukončením programu; je-li to\nčíslo, jedná se o návratovou hodnotu programu (to je malé číslo, obvykle\nmezi 0 a 255, které říká systému, jestli program skončil úspěšně (0), a pokud ne (1 až 255),\ntak s jakou chybou spadnul).\n\n</p><p>Proměnné uvnitř funkce jsou lokální, tedy nejsou vidět ven, pokud na začátku\nfunkce nenapíšete <code>global x</code>, kde <code>x</code> je název proměnné.\nVyzkoušejte si, co to znamená, na trapném pedagogickém příkladu:\n\n</p><pre>def a(t):\n\tglobal b\n\tb = t\n\tc = t\n\nb = 10\nc = 10\na(5)\nprint(b, c)\n</pre>\n\n<p>Program vypíše <code>5 10</code>. Jednoduše proto, že jsme jednu\nz proměnných zglobálnili, kdežto druhou ne. Používejte <code>global</code> jen\ns velkým rozmyslem. Na předání výsledku funkce je totiž daleko vhodnější její\n<i>návratová hodnota</i>.\n\n</p><pre>def druha_mocnina(x):\n\treturn x*x\n\ny = druha_mocnina(5)\nprint(y, druha_mocnina(y))\n</pre>\n\n<p>vypíše <code>25 625</code>. Jak to všechno vypadá? Když Python zjistí, že\nv nějakém výrazu se nachází <i>volání funkce</i> (což je třeba ono\n<code>druha_mocnina(5)</code>), skočí do oné funkce, provede ji a na místo,\nkde původně bylo volání funkce, jako by vložil onu návratovou hodnotu.\nNásleduje další trapný pedagogický příklad.\n\n</p><pre>def soucin(a,b):\n\treturn a*b\n\ndef vynasob(t):\n\tglobal x\n\tx *= t\n\treturn x\n\nprint(1+2*3+4, soucin(1+2, 3+4))\nx = 2\nprint(vynasob(5)*2, vynasob(5) + vynasob(5))\n</pre>\n\n<p>Za domácí úkol si odvoďte, proč se na prvním řádku vypíše\n<code>11 21</code> a na druhém <code>20 300</code>. U druhého řádku je\npotřeba si uvědomit, že se funkce vyhodnotí při <b>každém</b> zavolání zvlášť.\nTomu, že funkce při svém zavolání mění něco, co na ní není na první pohled\nznát, se říká side-effects – vedlejší účinky – a dobrý programátor\nse snaží je buďto nemít vůbec, nebo je řádně zdokumentovat, neboť jsou častým\nzdrojem problémů.\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-7-rekurze-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-7-rekurze-text"
            ],
            "title": "Rekurze",
            "htmlAssignment": "<p>Na vstupu dostanete čísla A a B. Vaším úkolem je na výstup vypsat jejich největší společný dělitel a nejmenší společný násobek (každý na samostatný řádek).</p>",
            "points": 9,
            "taskReference": "zkp-7-rekurze",
            "position": [
                612.8917317390442,
                1242.545904636383
            ]
        },
        {
            "id": "zkp-7-rekurze-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-6-funkce-task"
            ],
            "position": [
                438.49085426330566,
                1216.8548574447632
            ],
            "title": "Rekurze",
            "htmlContent": "<p>V předposlední lekci základního kurzu programování si povíme něco\no rekurzi. Ovládnutím tohoto mocného principu postoupíme zase o krůček dál.\nO co se jedná?\n\n</p><p>Rekurze spočívá ve volání sebe sama. Tedy funkce volá sebe sama. To zní asi\ntrochu mysticky. Nejlíp poslouží příklad, zase pedagogický, neboť jej\npoužívají a opisují snad všechny učebnice na světě. Faktoriál je definován\njako <i>N! = 1‧2‧3‧ … ‧N</i>, z čehož je vidět, že <i>N! = N‧(N-1)!</i>.\nRekurzivní funkce pak vypadá takto:\n\n</p><pre>def fact(N):\n\tif (N == 1):\n\t\treturn 1\n\telse:\n\t\treturn N*fact(N-1)\n</pre>\n\n<p>Odborníci říkají, že funkce vykoná malou část problému, načež se zavolá\nznovu na zbytek. A reálně to tak opravdu funguje. Funkce má uložený seznam\nhodnot, které umí spočítat hned (tady to je jen <i>N = 1</i>), a pokud v tomto\nseznamu požadovaná hodnota není, nebere si servítky, spočítá svůj malý kousek\na zavolá sebe sama ke spočítání zbytku (menšího).\n\n</p><p>Další pedagogickou ilustrací je počítání Fibonacciho čísel rekurzí.\n\n</p><pre>def fibo(N):\n\tif (N == 0):\n\t\treturn 0\n\telif (N == 1):\n\t\treturn 1\n\telse:\n\t\treturn fibo(N-1) + fibo(N-2)\n</pre>\n\n<p>Tady už se hodí nakreslit si <i>strom volání</i>. Ten nám prozradí mnohé\nzajímavé věci:\n\n</p><pre>          F(4)\n         /   \\\n       F(3)   \\\n      /   \\    \\\n    F(2)  F(1) F(2)\n   /   \\      /   \\\n F(0)  F(1) F(0) F(1)\n</pre>\n\n<p>Všimněte si, že <code>F(2)</code> zbytečně počítá dvakrát svoji hodnotu.\nKdybychom udělali strom pro <code>F(5)</code> nebo pro ještě vyšší hodnotu\n<i>N</i>, pak bychom načapali takového plýtvání daleko víc. Pro <i>N</i>=1000\nbudeme plýtvat tak masivně, že se funkce <code>F(x)</code> zavolá zhruba 10<sup>208</sup>-krát…\n\n</p><p>Problém plýtvání se dá vyřešit tím, že si vypočítané hodnoty budeme\nukládat. To vypadá tak, že si nejprve nadefinujeme globální pole, které potom\npostupně zaplňujeme. Ilustrace nejprve kódem a potom zase stromem volání.\n\n</p><pre>fpole = [0, 1]\ndef fibo(N):\n\tif (len(fpole) &lt; N+1): # máme malé pole, tak ho prodloužíme\n\t\tfpole.extend([0 for i in range(N+1-len(fpole))]) # vícenásobný append\n\tif (N == 0):\n\t\treturn 0\n\telse:\n\t\tif (fpole[N] == 0):\n\t\t\tfpole[N] = fibo(N-1) + fibo(N-2)\n\t\treturn fpole[N]\n</pre>\n<pre>          F(4)\n         /   \\\n       F(3)   \\\n      /   \\    \\\n    F(2)  F(1) F(2)\n   /   \\    \n F(0)  F(1) \n</pre>\n\n<p>Zde odpadl jen kousek, ale zkuste si schválně pustit nejdříve původní\nrekurzivní algoritmus třeba na <code>fibo(100)</code> a potom tenhle upravený\nna <code>fibo(1000)</code>…\n\n</p><p>Nabízí se otázka, proč to celé vlastně děláme rekurzí. Ta je zcela na\nmístě. Často se tohle ořezávání dovede až do konce, tomu se pak říká dynamické\nprogramování a vypadá to tak, že si jednoduše onen seznam počítáme od začátku.\n\n</p><pre>fpole = [0, 1]\ndef fibo(N):\n\tfor i in range(len(fpole), N+1):\n\t\tfpole.append(fpole[i-1] + fpole[i-2])\n\treturn fpole[N]\n</pre>\n\n<p>Kampak se nám poděla rekurze? <i>Rozbalili</i> jsme ji. Použili jsme ji\njako nástroj, kdy jsme postupně od přímočarého náhledu na věc (definice)\npřešli až k naprosto odlišnému způsobu řešení (který je často velmi rychlý).\n\n</p><p>Celé to nemusí být ani zdaleka jednorozměrné. Co taková kombinační čísla?\nVíme o nich, že\n<!--<i><table><tr><td>N<td rowspan=2>=<td>N-1<td rowspan=2>+<td>N-1<tr><td>k<td>k-1<td>k</table></i>-->\n<i>C(N,k) = C(N-1, k-1) + C(N-1, k)</i>. Jak to reprezentovat programově?\nJednoduše! Stačí mít funkci o dvou parametrech a správně vyřešit okrajové\npřípady.\n\n</p><pre>def C(N,k):\n\tif N == k:\n\t\treturn 1\n\tif k == 0:\n\t\treturn 1\n\treturn C(N-1, k-1) + C(N-1, k)\n</pre>\n\n<p>Tolik k rekurzi a rozbalení a teď si to vyzkoušíme na nějakých příkladech.\n\n\t\t\t\t\t</p>"
        },
        {
            "id": "zkp-8-io-task",
            "type": "custom-open-data",
            "comment": "...",
            "requires": [
                "zkp-8-io-text"
            ],
            "title": "Vstup a výstup",
            "htmlAssignment": "<p>Jako vstup dostanete jedno číslo <i>N</i>, na výstup vykreslete prvočíselnou\nspirálu délky <i>N</i>. Na místě prvočísla vypíšete <code>#</code>, jinde\nvypíšete tečku. Případné volné místo vyplňte mezerami. Uprostřed – na místě\njedničky vypíšete (velké X) <code>X</code>, dvojka bude vpravo od ní a trojka\nvpravo nahoře (výpis proti směru hodinových ručiček).</p>\n\n<p>Příklad pro <i>N</i>=13:\n</p><pre>   #\n#.#.\n.X##\n#...\n</pre>\n\n<p>Příklad pro <i>N</i>=98:\n</p><pre>  .#......\n....#.#...\n.#.....#.#\n#.#...#...\n...#.#.#..\n..#.X##.#.\n.#.#......\n#...#.....\n.#...#...#\n#.....#...\n</pre>",
            "points": 10,
            "taskReference": "zkp-8-io",
            "position": [
                630.2031745910645,
                1333.5094537734985
            ]
        },
        {
            "id": "zkp-8-io-text",
            "type": "text",
            "comment": "...",
            "requires": [
                "zkp-7-rekurze-task"
            ],
            "position": [
                491.3121280670166,
                1295.2187490463257
            ],
            "title": "Vstup a výstup",
            "htmlContent": "<p>V posledním dílu kurzu budeme řešit technické záležitosti – vstup a\nvýstup. Kromě přesměrování souboru na vstup a přesměrování výstupu do souboru,\ncož jsou systémové věci, totiž umíme také přímo číst a psát zadané soubory.\n\n</p><p>Soubor je potřeba nejprve otevřít. To se dělá funkcí <code>open()</code>,\nkterá přebírá dva parametry. Prvním je jméno souboru, druhým pak mód, ve\nkterém se se souborem pracuje. Módem můžou být řetězce 'r', 'w', 'r+', 'a',\npřípadně 'rb', 'wb', 'r+b', 'ab'. Znamenají „pro čtení“, „pro zápis“, „pro\nčtení i zápis“, „pro připisování na konec souboru“. Další čtyři jsou pak totéž\nv binární formě. Ta má význam pouze na Windows (ostatní systémy to ignorují)\na vyžaduje předávání dat přesně tak, jak jsou uložena v souboru. Jinak dělají\nWindows jakousi černou magii s konci řádků.\n\n</p><p>Funkce <code>open</code> vrací objekt, který ukazuje na otevřený soubor.\nK němu lze přistupovat různými způsoby. Snažte se však v jednom programu nad\njedním souborem používat jen jednu variantu, jinak můžete dosáhnout nechtěných\nvýsledků.\n\n</p><pre>f = open(\"file\", \"r\") # otevře soubor\nline = f.readline() # přečte jeden řádek\nfile = f.read() # přečte celý soubor (když se nevejde do paměti,\n                        # řeší to až tehdy, když už paměť došla)\npart = f.read(100) # přečte 100 bajtů\nlines = f.readlines() # vytvoří pole, jehož prvky budou jednotlivé řádky\nfor line in f: # cyklí postupně přes všechny řádky souboru, zdaleka\n               # nejrychlejší způsob, jak postupně zpracovat celý soubor\n</pre>\n\n<p>Do souboru zapisujeme metodou <code>write</code> objektu <code>f</code>.\nPřebírá jeden parametr – řetězec, který chceme zapsat:\n\n</p><pre>f = open(\"file\", \"w\")\nline = \"Lorem ipsum dolor sit amet.\"\nf.write(line)\n</pre>\n\n<p>Soubor je po ukončení práce potřeba zavřít: <code>f.close()</code>.\n\n</p><p>Další věc, která se občas může hodit, je modul <code>sys</code>. Nahrává se\npodobně jako matematika – příkazem <code>import sys</code>. Obsahuje\nmimo jiné objekty <code>sys.stdin</code>, <code>sys.stdout</code> a\n<code>sys.stderr</code>, což jsou standardní vstup (z terminálu), standardní\nvýstup a standardní chybový výstup (oba na terminál). Proč jsou dva? Když\npřesměrujete výstup do souboru, tak aby se chybové hlášky nepsaly také do\nsouboru, ale stále na terminál, kde jsou užitečnější. Standardní chybový výstup\nlze také přesměrovat – konstrukcí <code>2&gt;soubor</code>. \n\n</p><p>Pokud zadáváte vstup v terminálu bez přesměrování, občas potřebujete programu\nsdělit, že žádná další data už zadávat nechcete – musíte poslat hlášku „konec \nsouboru“. Na UNIXech ji\npošlete stiskem klávesové zkratky Ctrl+D, ve Windows obvykle funguje Ctrl+Z \n(+ stiskněte Enter), ale prý se ve Windows už v terminálu neprogramuje, takže to\nmožná už zrušili.\n\n</p><p>Další zajímavou věcí v modulu <code>sys</code> je pole\n<code>sys.argv</code>, které obsahuje jako první prvek jméno sebe sama,\ntedy jméno právě běžícího programu, a jako další prvky jsou argumenty zadané\nna příkazové řádce. Pokud tedy pustíte <code>python prg.py --help</code>, pak\nse do <code>sys.argv[1]</code> uloží hodnota <code>\"--help\"</code>. Takhle je\nmožné předávat jméno souboru, ze kterého chcete číst vstup, žádat nápovědu,\nměnit ukecanost programu podle toho, co o jeho běhu chcete vědět.\nNapříklad UNIXové utility tohle masivně využívají.\n\n</p><p>Modul <code>sys</code> obsahuje ještě mnoho dalších informací, většinou\no systému, na kterém byl program puštěn. Pro kompletní popis si přečtěte\n<code>help(sys)</code> nebo manuál na internetu.\n\n</p><p>Ještě jednou věcí, která vás může při odevzdávání jiných úloh zajímat, je\nvynucená optimalizace. Když spustíte Python s parametrem <code>-O</code>,\npřečte si soubor a přeloží si ho do něčeho, z čeho se mu bude rychleji číst.\nFunguje to občas, občas ne, vyzkoušejte sami. Někdy to pomůže až desetinásobně,\njindy vůbec.\n\n</p><p>Tohle je z naší strany vše. To, co jste se z Pythonu za tento krátký\nstručný kurz naučili, není zdaleka všechno. Ani to nebylo naším cílem. Pokud se\nvám programování zalíbilo a chcete pokračovat dál, můžete se směle vrhnout do\nnašich dalších úloh, začít řešit naše série příkladů, přijet na\nsoustředění, poznat spoustu nových kamarádů, …\n\n\t\t\t\t\t</p>"
        }
    ],
    "clusters": {
        "Triviální výpočet": [
            "31-Z1-1"
        ],
        "Triviální průchod 1D pole": [
            "26-Z1-1"
        ],
        "Triviální průchody 2D pole": [
            "26-Z1-2",
            "26-Z4-3",
            "29-Z3-1",
            "31-Z1-4"
        ],
        "Želvy": [
            "29-Z1-1",
            "29-Z2-1",
            "29-Z4-3"
        ],
        "Komplexnější práce s poli": [
            "26-Z2-4",
            "29-Z1-3"
        ],
        "Práce s čísly": [
            "26-Z2-2",
            "26-Z3-3",
            "26-Z4-1"
        ],
        "Práce s řetězci": [
            "26-Z1-3",
            "26-Z2-3",
            "26-Z3-2",
            "29-Z3-2"
        ],
        "Grafy": [
            "26-Z1-4",
            "26-Z3-4",
            "26-Z4-4",
            "29-Z1-4",
            "31-Z1-2",
            "31-Z3-2",
            "31-Z3-3"
        ],
        "Voser": [
            "26-Z3-1",
            "29-Z3-3"
        ],
        "Nápad": [
            "26-Z4-2"
        ],
        "matematické": [
            "30-1-4"
        ]
    }
}